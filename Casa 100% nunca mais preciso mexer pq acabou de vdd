// -------------------------------------------------------------------------
// ---------------------------  BIBLIOTECAS  -------------------------------
// -------------------------------------------------------------------------
#include <SPI.h>
#include <Ethernet.h>
#include <Servo.h>

// -------------------------------------------------------------------------
// ------------------- CONECTANDO NO ARDUINO ETHERNET ----------------------
// -------------------------------------------------------------------------
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 177);
EthernetServer server(80);

// -------------------------------------------------------------------------
// ---------------- PINO DO PORTÃO E LOCALIZAÇÃO INICIAL -------------------
// -------------------------------------------------------------------------
const int pinoPortaoCasa1 = 8;   // VERDE
const int pinoPortaoCasa2 = 9;   // ROXO
const int pinoPortaoCasa3 = 10;  // AMARELO
const int pinoPortaoCasa4 = 11;  // BRANCO
const int pinoLaser = 12;        // BRANCO

// -------------------------------------------------------------------------
// --------------------------  PINOS LAMPADAS ------------------------------
// -------------------------------------------------------------------------
const int pinoQuarto = 22;    // BRANCO
const int pinoVaranda = 23;   // VERMELHO
const int pinoSala = 24;      // VERDE
const int pinoCozinha = 25;   // BRANCO
const int pinoBanheiro = 26;  // AZUL
const int pinoGaragem = 27;   // VERMELHO
const int pinoPoste1 = 28;    // AMARELO
const int pinoPoste2 = 29;    // LARANJA

// -------------------------------------------------------------------------
// --------------------------  PINOS SENSORES ------------------------------
// -------------------------------------------------------------------------

const int sensorChuva = 30;              // VERDE
const int sensorFogo = 31;               // BRANCO
const int pinoVentilador = 32;           // ROXO 
const int pinoVelocidadeVentilador = 3;  // LARANJA 
const int pinoBuzzer = 33;               // ROXO
const int pinoLdrLaser = A0;             // LARANJA
const int pinoLdrPostes = A1;            // VERDE
Servo meuServo;

// -------------------------------------------------------------------------
// ----------------------------  VARIAVEIS  --------------------------------
// -------------------------------------------------------------------------
int valorLdrLaser = 0;
int valorLdrPostes = 0;
int valorSensorAgua = 0;
int valorSensorFogo = 0;
unsigned long tempoUltimaLeituraChuva = 0;
unsigned long tempoUltimaLeituraFogo = 0;
const int intervaloLeituraChuva = 500;  
const int intervaloLeituraFogo = 300; 
int estadoChuvaAtual = HIGH;
int estadoChuvaAnterior = HIGH;
int estadoFogoAtual = HIGH;
int estadoFogoAnterior = HIGH;
int velocidadePortao = 2;
int portaoAbrirFechar = 12750;     // 12.750 segundos para abrir e fechar na velocid ade 2 (VER SE É ESSE TIMING MESMO)
unsigned long tempoDeAbrir;
const int limiteLaser = 450;
const int limitePoste = 975;
bool estadoDoAlarme = false;       // Alarme começa ligado!
bool alertaEnviado = false;
bool laserInterrompido = false;        
bool estadoDoAlarmeAnterior = false;   
unsigned long tempoAtivacaoAlarme = 0; 
unsigned long tempoUltimoApito = 0;    
unsigned long tempoUltimaMensagem = 0; 
int intervaloApito = 500;             
int intervaloMensagem = 1000;          
bool portaoCasaFechado = true;     // Portão começa fechado
bool portaoGaragemFechado = true;  // Portão começa fechado

// -------------------------------------------------------------------------
// -------------------- CONTROLAR ESTADO DAS LAMPADAS ----------------------
// -------------------------------------------------------------------------
bool luzQuarto = false;
bool luzVaranda = false;
bool luzSala = false;
bool luzCozinha = false;
bool luzBanheiro = false;
bool luzGaragem = false;

void setup() {
  // -------------------------------------------------------------------------
  // --- CONECTA A INTERNET /-/-/-/ CONECTA A COMUNICAÇÃO NO SERIAL MONITOR --
  // -------------------------------------------------------------------------
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();

  // -------------------------------------------------------------------------
  // ------------------  CONFIGURA PINOS DAS LAMPADAS  -----------------------
  // -------------------------------------------------------------------------
  pinMode(pinoQuarto, OUTPUT);
  pinMode(pinoVaranda, OUTPUT);
  pinMode(pinoSala, OUTPUT);
  pinMode(pinoCozinha, OUTPUT);
  pinMode(pinoBanheiro, OUTPUT);
  pinMode(pinoGaragem, OUTPUT);
  pinMode(pinoPoste1, OUTPUT);
  pinMode(pinoPoste2, OUTPUT);

  // -------------------------------------------------------------------------
  // ----------------  LUZES DA CASA - INICIO == DESLIGADAS  -----------------
  // -------------------------------------------------------------------------
  digitalWrite(pinoQuarto, LOW);
  digitalWrite(pinoVaranda, LOW);
  digitalWrite(pinoSala, LOW);
  digitalWrite(pinoCozinha, LOW);
  digitalWrite(pinoBanheiro, LOW);
  digitalWrite(pinoGaragem, LOW);
  digitalWrite(pinoPoste1, LOW);
  digitalWrite(pinoPoste2, LOW);
  digitalWrite(pinoBuzzer, LOW);

  // -------------------------------------------------------------------------
  // ----- PINOS LDR, LASER, SENSOR DISTANCIA, FOGO, CHUVA E PORTÃO  ---------
  // -------------------------------------------------------------------------
  pinMode(pinoLdrLaser, INPUT);
  pinMode(pinoLdrPostes, INPUT);
  pinMode(pinoLaser, OUTPUT);
  pinMode(pinoBuzzer, OUTPUT);
  pinMode(sensorChuva, INPUT);
  pinMode(sensorFogo, INPUT);
  pinMode(pinoVentilador, OUTPUT);
  pinMode(pinoVelocidadeVentilador, OUTPUT);
  pinMode(pinoPortaoCasa1, OUTPUT);
  pinMode(pinoPortaoCasa2, OUTPUT);
  pinMode(pinoPortaoCasa3, OUTPUT);
  pinMode(pinoPortaoCasa4, OUTPUT);
  digitalWrite(pinoVentilador, HIGH);

  // -------------------------------------------------------------------------
  // -------- PINO E POSIÇÃO INICIAL PORTÃO GARAGEM E PORTÃO CASA ------------
  // -------------------------------------------------------------------------
  meuServo.attach(2);  
  meuServo.write(115);
  delay(500); 
  meuServo.detach();
  //fecharPortao();

  Serial.print("Servidor web iniciado. Acesse: ");
  Serial.println(Ethernet.localIP());
}

void loop() {
  // -------------------------------------------------------------------------
  // ------------------------ CONECTA AO SERVIDOR ----------------------------
  // -------------------------------------------------------------------------
  EthernetClient client = server.available();
  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
        if (currentLine.startsWith("GET /sensors")) {
            valorSensorAgua = digitalRead(sensorChuva);
            valorSensorFogo = digitalRead(sensorFogo);
          if(estadoDoAlarme == true && valorLdrLaser > limiteLaser){
            if (!alertaEnviado) {
            alertaEnviado = true; 
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: application/json");
            client.println("Connection: close");
            client.println();
            client.print("{\"fogo\":");
            client.print(valorSensorFogo == HIGH ? 0 : 1);
            client.print(",\"chuva\":");
            client.print(valorSensorAgua == HIGH ? 0 : 1);
            client.print(",\"alerta\":\"LASER INTERROMPIDO!! CASA INVADIDA!!!!\"}");
            client.println();
        } else {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: application/json");
            client.println("Connection: close");
            client.println();
            client.print("{\"fogo\":");
            client.print(valorSensorFogo == HIGH ? 0 : 1);
            client.print(",\"chuva\":");
            client.print(valorSensorAgua == HIGH ? 0 : 1);
            client.print(",\"alerta\":\"\""); 
            client.println("}");
         }
        } else {
            alertaEnviado = false; 
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: application/json");
            client.println("Connection: close");
            client.println();
            client.print("{\"fogo\":");
            client.print(valorSensorFogo == HIGH ? 0 : 1);
            client.print(",\"chuva\":");
            client.print(valorSensorAgua == HIGH ? 0 : 1);
            client.print(",\"alerta\":\"\""); 
            client.println("}");
    }
    break;
    } else if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connection: close");
            client.println();
            client.println("<!DOCTYPE html><html>");
            client.println("<head>");
            client.println("<meta charset='UTF-8'>");
            client.println("<meta name='viewport' content='width=device-width, initial-scale=1.0'>");
            client.println("<title>Casa automatizada</title>");
            client.println("<style>");
            client.println("body { font-family: Arial, sans-serif; background-color: #f0f0f0; text-align: center; padding: 20px; }");
            client.println(".container { background-color: #fff; padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); max-width: 400px; margin: 0 auto; }");
            client.println("h1 { color: #333; }");
            client.println(".row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; padding: 8px; }");
            client.println(".row:nth-child(even) { background-color: #d0d0d0; }");
            client.println(".label { font-weight: bold; margin-right: 10px; width: 100px; text-align: left; white-space: nowrap; }");
            client.println("button { padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; }");
            client.println(".ligar { background-color: #218838; color: white; }");
            client.println(".desligar { background-color: #c82333; color: white; }");
            client.println(".ligarVent { display: inline-block; width: 49%; background-color: #218838; color: white; margin: 2px 1%; border-radius: 8px; }");
            client.println(".desligarVent { display: block; background-color: #c82333; color: white; width: 100%; margin: 5px 0; border-radius: 10px; }");
            client.println(".button-row { display: flex; justify-content: space-between; margin-bottom: 10px; }");
            client.println(".ligarAlarme, .desligarAlarme, .abrir, .fechar { flex: 1; margin: 5px; padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; color: white; }");
            client.println(".ligarAlarme { background-color: #218838; }");
            client.println(".desligarAlarme { background-color: #c82333; }");
            client.println(".abrir { background-color: #218838; }");
            client.println(".fechar { background-color: #c82333; }");
            client.println("</style>");
            client.println("<script>");
            client.println("function sendCommand(command) {");
            client.println("  var xhttp = new XMLHttpRequest();");
            client.println("  xhttp.onreadystatechange = function() {");
            client.println("    if (this.readyState == 4 && this.status == 200) {");
            client.println("      console.log('Comando enviado: ' + command);");
            client.println("      if (command === 'alarm=Desligar Alarme') {");
            client.println("        document.getElementById('statusAlarme').innerText = 'Desligado';");
            client.println("      } else if (command === 'alarm=Ligar Alarme') {");
            client.println("        document.getElementById('statusAlarme').innerText = 'Ligado';");
            client.println("      }");
            client.println("    }");
            client.println("  };");
            client.println("  xhttp.open('GET', '/?' + command, true);");
            client.println("  xhttp.send();");
            client.println("}");
            client.println("function updateSensors() {");
            client.println("  var xhttp = new XMLHttpRequest();");
            client.println("  xhttp.onreadystatechange = function() {");
            client.println("    if (this.readyState == 4 && this.status == 200) {");
            client.println("      var data = JSON.parse(this.responseText);");
            client.println("      document.getElementById('statusFogo').innerText = data.fogo ? 'FOGO DETECTADO!!' : 'Sem fogo.';");
            client.println("      document.getElementById('statusChuva').innerText = data.chuva ? 'CHUVA DETECTADA!!' : 'Sem chuva.';");
            client.println("      if (data.alerta) {"); 
            client.println("        alert(data.alerta);"); 
            client.println("      }");
            client.println("    }");
            client.println("  };");
            client.println("  xhttp.open('GET', '/sensors', true);");
            client.println("  xhttp.send();");
            client.println("}");
            client.println("setInterval(updateSensors, 1000);");
            client.println("</script>");
            client.println("</head>");
            client.println("<body>");
            client.println("<div class='container'>");
            client.println("<h1>Lâmpadas</h1>");

            // Controles para o quarto
            client.println("<div class='row'><span class='label'>Quarto</span>");
            client.println("<button onclick=\"sendCommand('luzQuarto=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzQuarto=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para a varanda
            client.println("<div class='row row-alt'><span class='label'>Varanda</span>");
            client.println("<button onclick=\"sendCommand('luzVaranda=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzVaranda=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para a sala
            client.println("<div class='row'><span class='label'>Sala</span>");
            client.println("<button onclick=\"sendCommand('luzSala=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzSala=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para a cozinha
            client.println("<div class='row row-alt'><span class='label'>Cozinha</span>");
            client.println("<button onclick=\"sendCommand('luzCozinha=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzCozinha=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para o banheiro
            client.println("<div class='row'><span class='label'>Banheiro</span>");
            client.println("<button onclick=\"sendCommand('luzBanheiro=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzBanheiro=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para a garagem
            client.println("<div class='row row-alt'><span class='label'>Garagem</span>");
            client.println("<button onclick=\"sendCommand('luzGaragem=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzGaragem=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles para ligar e desligar todas as luzes
            client.println("<div class='row'><span class='label'>Luz Geral</span>");
            client.println("<button onclick=\"sendCommand('luzGeral=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>");
            client.println("<button onclick=\"sendCommand('luzGeral=desligar')\" class='desligar'>Desligar</button></div>");

            // Controles do alarme
            client.println("<h2>Alarme</h2>");
            client.println("<div class='button-row'>");
            client.println("<button onclick=\"sendCommand('alarm=Ligar Alarme')\" class='ligarAlarme'>Ligar Alarme</button>");
            client.println("<button onclick=\"sendCommand('alarm=Desligar Alarme')\" class='desligarAlarme'>Desligar Alarme</button>");
            client.println("</div>");
            client.println("<p>Status do Alarme: <strong id='statusAlarme'>" + String(estadoDoAlarme ? "Ligado" : "Desligado") + "</strong></p>");

            // Controles para abrir e fechar o portão da casa
            client.println("<h2>Portão da casa</h2>");
            client.println("<div class='button-row'>");
            client.println("<button onclick=\"sendCommand('portaoCasa=abrir')\" class='abrir'>Abrir portão</button>");
            client.println("<button onclick=\"sendCommand('portaoCasa=fechar')\" class='fechar'>Fechar portão</button>");
            client.println("</div>");

            // Controles para abrir e fechar o portão da garagem
            client.println("<h2>Portão da garagem</h2>");
            client.println("<div class='button-row'>");
            client.println("<button onclick=\"sendCommand('portaoGaragem=abrir')\" class='abrir'>Abrir garagem</button>");
            client.println("<button onclick=\"sendCommand('portaoGaragem=fechar')\" class='fechar'>Fechar garagem</button>");
            client.println("</div>");

            // Velocidade mínima, máxima e desligar ventilador
            client.println("<h2>Ventilador</h2>");
            client.println("<div class='row' style='margin-bottom: 0;'>");
            client.println("<button onclick=\"sendCommand('ventilador=ligarMin')\" class='ligarVent'>Velocidade mínima</button>");
            client.println("<button onclick=\"sendCommand('ventilador=ligarMed')\" class='ligarVent'>Velocidade média</button>");
            client.println("<button onclick=\"sendCommand('ventilador=ligarMax')\" class='ligarVent'>Velocidade máxima</button>");
            client.println("</div>");
            client.println("<button onclick=\"sendCommand('ventilador=desligar')\" class='desligarVent'>Desligar Ventilador</button>");

            // Sensor de fogo
            client.println("<h2>Sensor de fogo</h2>");
            client.println("<p>Status do Sensor de Fogo: <strong id='statusFogo'>" + String(valorSensorFogo ? "Sem fogo." : "FOGO DETECTADO!!") + "</strong></p>");

            // Sensor de chuva
            client.println("<h2>Sensor de chuva</h2>");
            client.println("<p>Status do Sensor de Chuva: <strong id='statusChuva'>" + String(valorSensorAgua ? "Sem chuva." : "CHUVA DETECTADA!!") + "</strong></p>");

            client.println("</div>");
            client.println("</body></html>");
            client.println();
            break;
          }
          currentLine = "";
        } else if (c != '\r') {
          currentLine += c;

          // -------------------------------------------------------------------------
          // ---------------------------- LUZES DA CASA ------------------------------
          // -------------------------------------------------------------------------
          if (currentLine.endsWith("GET /?luzQuarto=ligar")) {
            luzQuarto = true;
            digitalWrite(pinoQuarto, HIGH);
          } else if (currentLine.endsWith("GET /?luzQuarto=desligar")) {
            luzQuarto = false;
            digitalWrite(pinoQuarto, LOW);
          } else if (currentLine.endsWith("GET /?luzVaranda=ligar")) {
            luzVaranda = true;
            digitalWrite(pinoVaranda, HIGH);
          } else if (currentLine.endsWith("GET /?luzVaranda=desligar")) {
            luzVaranda = false;
            digitalWrite(pinoVaranda, LOW);
          } else if (currentLine.endsWith("GET /?luzSala=ligar")) {
            luzSala = true;
            digitalWrite(pinoSala, HIGH);
          } else if (currentLine.endsWith("GET /?luzSala=desligar")) {
            luzSala = false;
            digitalWrite(pinoSala, LOW);
          } else if (currentLine.endsWith("GET /?luzCozinha=ligar")) {
            luzCozinha = true;
            digitalWrite(pinoCozinha, HIGH);
          } else if (currentLine.endsWith("GET /?luzCozinha=desligar")) {
            luzCozinha = false;
            digitalWrite(pinoCozinha, LOW);
          } else if (currentLine.endsWith("GET /?luzBanheiro=ligar")) {
            luzBanheiro = true;
            digitalWrite(pinoBanheiro, HIGH);
          } else if (currentLine.endsWith("GET /?luzBanheiro=desligar")) {
            luzBanheiro = false;
            digitalWrite(pinoBanheiro, LOW);
          } else if (currentLine.endsWith("GET /?luzGaragem=ligar")) {
            luzGaragem = true;
            digitalWrite(pinoGaragem, HIGH);
          } else if (currentLine.endsWith("GET /?luzGaragem=desligar")) {
            luzGaragem = false;
            digitalWrite(pinoGaragem, LOW);
          } else if (currentLine.endsWith("GET /?luzGeral=ligar")) {
            luzQuarto = true;
            digitalWrite(pinoQuarto, HIGH);
            luzVaranda = true;
            digitalWrite(pinoVaranda, HIGH);
            luzSala = true;
            digitalWrite(pinoSala, HIGH);
            luzCozinha = true;
            digitalWrite(pinoCozinha, HIGH);
            luzBanheiro = true;
            digitalWrite(pinoBanheiro, HIGH);
            luzGaragem = true;
            digitalWrite(pinoGaragem, HIGH);
          } else if (currentLine.endsWith("GET /?luzGeral=desligar")) {
            luzQuarto = false;
            digitalWrite(pinoQuarto, LOW);
            luzVaranda = false;
            digitalWrite(pinoVaranda, LOW);
            luzSala = false;
            digitalWrite(pinoSala, LOW);
            luzCozinha = false;
            digitalWrite(pinoCozinha, LOW);
            luzBanheiro = false;
            digitalWrite(pinoBanheiro, LOW);
            luzGaragem = false;
            digitalWrite(pinoGaragem, LOW);
          }

          // -------------------------------------------------------------------------
          // ------------------------  LIGAR DESLIGAR ALARME  ------------------------
          // -------------------------------------------------------------------------
          else if (currentLine.endsWith("GET /?alarm=Ligar%20Alarme")) {
            if (estadoDoAlarme == false) {
              estadoDoAlarme = true;
              digitalWrite(pinoBuzzer, HIGH);
            }
          } else if (currentLine.endsWith("GET /?alarm=Desligar%20Alarme")) {
            if (estadoDoAlarme == true) {
              estadoDoAlarme = false;
              digitalWrite(pinoBuzzer, LOW);
            }
          }

          // -------------------------------------------------------------------------
          // ---------------------  LIGAR E DESLIGAR VENTILADOR  ---------------------
          // -------------------------------------------------------------------------
          else if (currentLine.endsWith("GET /?ventilador=desligar")) {
            Serial.println("Ventilador desligado.");
            delay(1000);
            digitalWrite(pinoVentilador, LOW);
          } else if (currentLine.endsWith("GET /?ventilador=ligarMin")) {
            Serial.println("Ventilador ligado: velocidade minima!"); 
            digitalWrite(pinoVentilador, HIGH);
            delay(1000);
            analogWrite(pinoVelocidadeVentilador, 255);
            delay(100);
            analogWrite(pinoVelocidadeVentilador, 110);
          } else if (currentLine.endsWith("GET /?ventilador=ligarMed")) {
            Serial.println("Ventilador ligado: velocidade média!"); 
            delay(1000);
            digitalWrite(pinoVentilador, HIGH);
            analogWrite(pinoVelocidadeVentilador, 155);
          } else if (currentLine.endsWith("GET /?ventilador=ligarMax")) {
            Serial.println("Ventilador ligado: velocidade máxima!");
            digitalWrite(pinoVentilador, HIGH);
            delay(1000);
            analogWrite(pinoVelocidadeVentilador, 255);
          }

          // -------------------------------------------------------------------------
          // ------------------------  ABRIR E FECHAR GARAGEM  -----------------------
          // -------------------------------------------------------------------------
          else if (currentLine.endsWith("GET /?portaoGaragem=abrir")) {
             if (portaoGaragemFechado == true) {
              meuServo.attach(2); 
              meuServo.write(0);  
              delay(500);        
              meuServo.detach();  
              portaoGaragemFechado = false;
             }
          } else if (currentLine.endsWith("GET /?portaoGaragem=fechar")) {
             if (portaoGaragemFechado == false) {
              meuServo.attach(2);  
              meuServo.write(115);
              delay(500);         
              meuServo.detach();  
              portaoGaragemFechado = true;
             }
          }
          // -------------------------------------------------------------------------
          // ---------------------  ABRIR E FECHAR PORTÃO DA CASA --------------------
          // -------------------------------------------------------------------------
          else if (currentLine.endsWith("GET /?portaoCasa=abrir")) {
            if (portaoCasaFechado == true) {
              abrirPortao();  // A função esta no final
              portaoCasaFechado = false;
            }
          } else if (currentLine.endsWith("GET /?portaoCasa=fechar")) {
            if (portaoCasaFechado == false) {
              fecharPortao();  // A função esta no final
              portaoCasaFechado = true;
            }
          }
        }
      }
    }
    delay(1);
    client.stop();
  }

  // -------------------------------------------------------------------------
  // ------------------------  ALARME (LASER E LDR)   ------------------------
  // -------------------------------------------------------------------------
  if (estadoDoAlarme != estadoDoAlarmeAnterior) {
    if (estadoDoAlarme) {
      laserInterrompido = false;
      digitalWrite(pinoLaser, HIGH);      
      tempoAtivacaoAlarme = millis();      
      Serial.println("Alarme ligado.");
    } else {
      digitalWrite(pinoLaser, LOW);        
      noTone(pinoBuzzer);                 
      Serial.print("Alarme desligado. LDR: ");
      Serial.println(valorLdrLaser);
    }
    estadoDoAlarmeAnterior = estadoDoAlarme; 
  }
  if (estadoDoAlarme && (millis() - tempoAtivacaoAlarme > 200)) {
    valorLdrLaser = analogRead(pinoLdrLaser);
    if (limiteLaser > valorLdrLaser) {
      if (laserInterrompido) {  
        laserInterrompido = false;
        Serial.print("Laser detectado! LDR: ");
        Serial.println(valorLdrLaser);
        noTone(pinoBuzzer);  
      }
    } else if (valorLdrLaser > limiteLaser) {
      if (!laserInterrompido) {  
        laserInterrompido = true;
        Serial.print("Laser interrompido!!! Casa invadida!! LDR: ");
        Serial.println(valorLdrLaser);
      }
      if (millis() - tempoUltimoApito > intervaloApito) {
        tempoUltimoApito = millis();       
        if (digitalRead(pinoBuzzer) == HIGH) {
          noTone(pinoBuzzer);            
        } else {
          tone(pinoBuzzer, 2000);         
        }
      }
    }
    if (millis() - tempoUltimaMensagem > intervaloMensagem) {
      tempoUltimaMensagem = millis();  
      if (laserInterrompido) {
        Serial.print("Laser interrompido! LDR: ");
      } else {
        Serial.print("Laser detectado. LDR: ");
      }
      Serial.println(valorLdrLaser);
    }
  }

  // -------------------------------------------------------------------------
  // ------------------------- POSTES E LDR ----------------------------------
  // -------------------------------------------------------------------------
  valorLdrPostes = analogRead(pinoLdrPostes);
  if (limitePoste > valorLdrPostes) {
    digitalWrite(pinoPoste1, LOW);
    digitalWrite(pinoPoste2, LOW);
    Serial.print("Dia, postes desligados. Valor do LDR: ");
    Serial.println(valorLdrPostes);
  } else if (valorLdrPostes > limitePoste) {
    digitalWrite(pinoPoste1, HIGH);
    digitalWrite(pinoPoste2, HIGH);
    Serial.print("Noite, postes ligados. Valor do LDR: ");
    Serial.println(valorLdrPostes);
  }


  //--------------------------------------------------------------------------
  //---------TEMPO PARA NAO DEIXAR INSTAVEL A DETECÇÃO DE CHUVA/FOGO----------
  //--------------------------------------------------------------------------
                       unsigned long tempoAtual = millis();
  // -------------------------------------------------------------------------
  // ----------------------- DETECTOR DE CHUVA -------------------------------
  // ------------------------------------------------------------------------- 
   if (tempoAtual - tempoUltimaLeituraChuva > intervaloLeituraChuva) {
    int leituraChuva = digitalRead(sensorChuva);
    if (leituraChuva == estadoChuvaAnterior) {
      estadoChuvaAtual = leituraChuva;
    }
    estadoChuvaAnterior = leituraChuva;
    tempoUltimaLeituraChuva = tempoAtual;
    if (estadoChuvaAtual == HIGH) {
      Serial.println("Sem chuva.");
    } else if (estadoChuvaAtual == LOW) {
      Serial.println("CHUVA DETECTADA!!");
    }
  }

  // -------------------------------------------------------------------------
  // ----------------------- DETECTOR DE FOGO --------------------------------
  // -------------------------------------------------------------------------
  if (tempoAtual - tempoUltimaLeituraFogo > intervaloLeituraFogo) {
    int leituraFogo = digitalRead(sensorFogo);
    if (leituraFogo == estadoFogoAnterior) {
      estadoFogoAtual = leituraFogo;
    }
    estadoFogoAnterior = leituraFogo;
    tempoUltimaLeituraFogo = tempoAtual;
    if (estadoFogoAtual == LOW) {
      Serial.println("FOGO DETECTADO!!");
      tone(pinoBuzzer, 2000);
      delay(200);
    } else if (estadoFogoAtual == HIGH) {
      Serial.println("Sem fogo.");
      noTone(pinoBuzzer);
    }
  }
  delay(500);
}

// -------------------------------------------------------------------------
// -------------- FUNÇÃO DE ABRIR E FECHAR PORTÃO DA CASA ------------------
// -------------------------------------------------------------------------
void abrirPortao() {
    unsigned long tempoDeAbrir = millis();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);
  }
}

void fecharPortao() {
    unsigned long tempoDeAbrir = millis();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);
  }
}
