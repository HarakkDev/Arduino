#include <SPI.h>
#include <Ethernet.h>
#include <Servo.h>

// Configuração de rede
const byte mac[] PROGMEM = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
const IPAddress ip(192, 168, 1, 177);
EthernetServer server(80);

// Definição dos pinos
const byte pinoPortaoCasa1 = 8;
const byte pinoPortaoCasa2 = 9;
const byte pinoPortaoCasa3 = 10;
const byte pinoPortaoCasa4 = 11;
const byte pinoLaser = 12;

const byte pinoQuarto = 22;
const byte pinoVaranda = 23;
const byte pinoSala = 24;
const byte pinoCozinha = 25;
const byte pinoBanheiro = 26;
const byte pinoGaragem = 27;
const byte pinoPoste1 = 28;
const byte pinoPoste2 = 29;

const byte sensorChuva = 30;
const byte sensorFogo = 31;
const byte pinoVentilador = 32;
const byte pinoVelocidadeVentilador = 3;
const byte pinoBuzzer = 33;
const byte pinoVaral1 = 34;
const byte pinoVaral2 = 35;
const byte pinoEnableB = 4;
const byte pinoLdrLaser = A0;
const byte pinoLdrPostes = A1;

Servo meuServo;

// Variáveis globais
uint16_t valorLdrLaser = 0;
uint16_t valorLdrPostes = 0;
uint16_t valorSensorAgua = 0;
uint16_t valorSensorFogo = 0;

// Timers para millis()
unsigned long tempoUltimaLeituraChuva = 0;
unsigned long tempoUltimaLeituraFogo = 0;
unsigned long tempoUltimaLeituraLDR = 0;
unsigned long tempoUltimoLoop = 0;
const unsigned long intervaloLeituraChuva = 1000;
const uint16_t intervaloLeituraFogo = 300;
const uint16_t intervaloLeituraLDR = 500;

byte estadoChuvaAtual = HIGH, estadoChuvaAnterior = HIGH;
byte estadoFogoAtual = HIGH, estadoFogoAnterior = HIGH;
byte velocidadePortao = 2;
const uint16_t portaoAbrirFechar = 12750;

const uint16_t limiteLaser = 450;
const uint16_t limitePoste = 900;

bool estadoDoAlarme = false;
bool alertaEnviado = false;
bool laserInterrompido = false;
bool estadoDoAlarmeAnterior = false;
bool varalRecolhido = false;
unsigned long tempoAtivacaoAlarme = 0;
unsigned long tempoUltimoApito = 0;
unsigned long tempoUltimaMensagem = 0;
const uint16_t intervaloApito = 50;
const uint16_t intervaloMensagem = 1000;

bool portaoCasaFechado = true;
bool portaoGaragemFechado = true;

// Estados das lâmpadas
bool luzQuarto = false;
bool luzVaranda = false;
bool luzSala = false;
bool luzCozinha = false;
bool luzBanheiro = false;
bool luzGaragem = false;

void setup() {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();

  // Configura pinos das lâmpadas
  for (byte pino = 22; pino <= 29; pino++) {
    pinMode(pino, OUTPUT);
    digitalWrite(pino, LOW);
  }
  pinMode(pinoBuzzer, OUTPUT);
  digitalWrite(pinoBuzzer, LOW);

  // Configura outros pinos
  pinMode(pinoLdrLaser, INPUT);
  pinMode(pinoLdrPostes, INPUT);
  pinMode(pinoLaser, OUTPUT);
  pinMode(sensorChuva, INPUT);
  pinMode(sensorFogo, INPUT);
  pinMode(pinoVentilador, OUTPUT);
  pinMode(pinoVelocidadeVentilador, OUTPUT);
  pinMode(pinoVaral1, OUTPUT);
  pinMode(pinoVaral2, OUTPUT);
  
  for (byte pino = 8; pino <= 11; pino++) pinMode(pino, OUTPUT);
  digitalWrite(pinoVentilador, HIGH);

  // Posição inicial do portão da garagem
  meuServo.attach(2);
  meuServo.write(115);
  delay(500); // Único delay necessário no setup
  meuServo.detach();

  Serial.print(F("Servidor web iniciado. Acesse: "));
  Serial.println(Ethernet.localIP());
}

void loop() {
  unsigned long tempoAtual = millis();
  
  // Processa clientes do servidor web
  processarServidorWeb();
  
  // Gerencia o alarme
  gerenciarAlarme(tempoAtual);
  
  // Controla os postes baseado no LDR
  if (tempoAtual - tempoUltimaLeituraLDR > intervaloLeituraLDR) {
    tempoUltimaLeituraLDR = tempoAtual;
    controlarPostes();
  }

  // Detecta fogo
  if (tempoAtual - tempoUltimaLeituraFogo > intervaloLeituraFogo) {
    tempoUltimaLeituraFogo = tempoAtual;
    detectarFogo();
  }

  if (tempoAtual - tempoUltimaLeituraChuva > intervaloLeituraChuva) {
    tempoUltimaLeituraChuva = tempoAtual;
    detectarAgua();
  }
}


void processarServidorWeb() {
  EthernetClient client = server.available();
  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.startsWith("GET /sensors")) {
            handleSensorsRequest(client);
            break;
          } else if (currentLine.length() == 0) {
            handleRootRequest(client);
            break;
          }
          currentLine = "";
        } else if (c != '\r') {
          currentLine += c;
          handleClientCommands(currentLine, client);
        }
      }
    }
    client.stop();
  }
}

void handleSensorsRequest(EthernetClient &client) {
  valorSensorAgua = digitalRead(sensorChuva);
  valorSensorFogo = digitalRead(sensorFogo);
  
  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: application/json"));
  client.println(F("Connection: close"));
  client.println();
  
  client.print(F("{\"fogo\":"));
  client.print(valorSensorFogo == HIGH ? 0 : 1);
  client.print(F(",\"chuva\":"));
  client.print(valorSensorAgua == HIGH ? 0 : 1);
  client.print(F(",\"alerta\":\""));
  
  if (estadoDoAlarme && valorLdrLaser > limiteLaser) {
    client.print(F("LASER INTERROMPIDO!! CASA INVADIDA!!!!"));
    alertaEnviado = true;
  } else {
    client.print(F(""));
    alertaEnviado = false;
  }
  
  client.println(F("\"}"));
}

void handleRootRequest(EthernetClient &client) {
  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: text/html"));
  client.println(F("Connection: close"));
  client.println();
  
  client.println(F("<!DOCTYPE html><html>"));
  client.println(F("<head>"));
  client.println(F("<meta charset='UTF-8'>"));
  client.println(F("<meta name='viewport' content='width=device-width, initial-scale=1.0'>"));
  client.println(F("<title>Casa automatizada</title>"));
  client.println(F("<style>"));
  client.println(F("body { font-family: Arial, sans-serif; background-color: #f0f0f0; text-align: center; padding: 20px; }"));
  client.println(F(".container { background-color: #fff; padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); max-width: 400px; margin: 0 auto; }"));
  client.println(F("h1 { color: #333; }"));
  client.println(F(".row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; padding: 8px; }"));
  client.println(F(".row:nth-child(even) { background-color: #d0d0d0; }"));
  client.println(F(".label { font-weight: bold; margin-right: 10px; width: 100px; text-align: left; white-space: nowrap; }"));
  client.println(F("button { padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; }"));
  client.println(F(".ligar { background-color: #218838; color: white; }"));
  client.println(F(".desligar { background-color: #c82333; color: white; }"));
  client.println(F(".ligarVent { display: inline-block; width: 49%; background-color: #218838; color: white; margin: 2px 1%; border-radius: 8px; }"));
  client.println(F(".desligarVent { display: block; background-color: #c82333; color: white; width: 100%; margin: 5px 0; border-radius: 10px; }"));
  client.println(F(".button-row { display: flex; justify-content: space-between; margin-bottom: 10px; }"));
  client.println(F(".ligarAlarme, .desligarAlarme, .abrir, .fechar { flex: 1; margin: 5px; padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; color: white; }"));
  client.println(F(".ligarAlarme { background-color: #218838; }"));
  client.println(F(".desligarAlarme { background-color: #c82333; }"));
  client.println(F(".abrir { background-color: #218838; }"));
  client.println(F(".fechar { background-color: #c82333; }"));
  client.println(F("</style>"));
  client.println(F("<script>"));
  client.println(F("function sendCommand(command) {"));
  client.println(F("  var xhttp = new XMLHttpRequest();"));
  client.println(F("  xhttp.onreadystatechange = function() {"));
  client.println(F("    if (this.readyState == 4 && this.status == 200) {"));
  client.println(F("      console.log('Comando enviado: ' + command);"));
  client.println(F("      if (command === 'alarm=Desligar Alarme') {"));
  client.println(F("        document.getElementById('statusAlarme').innerText = 'Desligado';"));
  client.println(F("      } else if (command === 'alarm=Ligar Alarme') {"));
  client.println(F("        document.getElementById('statusAlarme').innerText = 'Ligado';"));
  client.println(F("      }"));
  client.println(F("    }"));
  client.println(F("  };"));
  client.println(F("  xhttp.open('GET', '/?' + command, true);"));
  client.println(F("  xhttp.send();"));
  client.println(F("}"));
  client.println(F("function updateSensors() {"));
  client.println(F("  var xhttp = new XMLHttpRequest();"));
  client.println(F("  xhttp.onreadystatechange = function() {"));
  client.println(F("    if (this.readyState == 4 && this.status == 200) {"));
  client.println(F("      var data = JSON.parse(this.responseText);"));
  client.println(F("      document.getElementById('statusFogo').innerText = data.fogo ? 'FOGO DETECTADO!!' : 'Sem fogo.';"));
  client.println(F("      document.getElementById('statusChuva').innerText = data.chuva ? 'CHUVA DETECTADA!!' : 'Sem chuva.';"));
  client.println(F("      if (data.alerta) {"));
  client.println(F("        alert(data.alerta);"));
  client.println(F("      }"));
  client.println(F("    }"));
  client.println(F("  };"));
  client.println(F("  xhttp.open('GET', '/sensors', true);"));
  client.println(F("  xhttp.send();"));
  client.println(F("}"));
  client.println(F("setInterval(updateSensors, 1000);"));
  client.println(F("</script>"));
  client.println(F("</head>"));
  client.println(F("<body>"));
  client.println(F("<div class='container'>"));
  client.println(F("<h1>Lâmpadas</h1>"));
  
  // Controles para as lâmpadas
  client.println(F("<div class='row'><span class='label'>Quarto</span>"));
  client.println(F("<button onclick=\"sendCommand('luzQuarto=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzQuarto=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row row-alt'><span class='label'>Varanda</span>"));
  client.println(F("<button onclick=\"sendCommand('luzVaranda=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzVaranda=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row'><span class='label'>Sala</span>"));
  client.println(F("<button onclick=\"sendCommand('luzSala=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzSala=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row row-alt'><span class='label'>Cozinha</span>"));
  client.println(F("<button onclick=\"sendCommand('luzCozinha=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzCozinha=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row'><span class='label'>Banheiro</span>"));
  client.println(F("<button onclick=\"sendCommand('luzBanheiro=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzBanheiro=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row row-alt'><span class='label'>Garagem</span>"));
  client.println(F("<button onclick=\"sendCommand('luzGaragem=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzGaragem=desligar')\" class='desligar'>Desligar</button></div>"));
  
  client.println(F("<div class='row'><span class='label'>Luz Geral</span>"));
  client.println(F("<button onclick=\"sendCommand('luzGeral=ligar')\" class='ligar' style='margin-right: 10px;'>Ligar</button>"));
  client.println(F("<button onclick=\"sendCommand('luzGeral=desligar')\" class='desligar'>Desligar</button></div>"));
  
  // Controles do alarme
  client.println(F("<h2>Alarme</h2>"));
  client.println(F("<div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('alarm=Ligar Alarme')\" class='ligarAlarme'>Ligar Alarme</button>"));
  client.println(F("<button onclick=\"sendCommand('alarm=Desligar Alarme')\" class='desligarAlarme'>Desligar Alarme</button>"));
  client.println(F("</div>"));
  client.print(F("<p>Status do Alarme: <strong id='statusAlarme'>"));
  client.print(estadoDoAlarme ? F("Ligado") : F("Desligado"));
  client.println(F("</strong></p>"));
  
  // Controles do portão da casa
  client.println(F("<h2>Portão da casa</h2>"));
  client.println(F("<div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('portaoCasa=abrir')\" class='abrir'>Abrir portão</button>"));
  client.println(F("<button onclick=\"sendCommand('portaoCasa=fechar')\" class='fechar'>Fechar portão</button>"));
  client.println(F("</div>"));
  
  // Controles do portão da garagem
  client.println(F("<h2>Portão da garagem</h2>"));
  client.println(F("<div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('portaoGaragem=abrir')\" class='abrir'>Abrir garagem</button>"));
  client.println(F("<button onclick=\"sendCommand('portaoGaragem=fechar')\" class='fechar'>Fechar garagem</button>"));
  client.println(F("</div>"));
  
  // Controles do ventilador
  client.println(F("<h2>Ventilador</h2>"));
  client.println(F("<div class='row' style='margin-bottom: 0;'>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMin')\" class='ligarVent'>Velocidade mínima</button>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMed')\" class='ligarVent'>Velocidade média</button>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMax')\" class='ligarVent'>Velocidade máxima</button>"));
  client.println(F("</div>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=desligar')\" class='desligarVent'>Desligar Ventilador</button>"));
  
  // Status dos sensores
  client.println(F("<h2>Sensor de fogo</h2>"));
  client.print(F("<p>Status do Sensor de Fogo: <strong id='statusFogo'>"));
  client.print(valorSensorFogo ? F("Sem fogo.") : F("FOGO DETECTADO!!"));
  client.println(F("</strong></p>"));
  
  client.println(F("<h2>Sensor de chuva</h2>"));
  client.print(F("<p>Status do Sensor de Chuva: <strong id='statusChuva'>"));
  client.print(valorSensorAgua ? F("Sem chuva.") : F("CHUVA DETECTADA!!"));
  client.println(F("</strong></p>"));
  
  client.println(F("</div>"));
  client.println(F("</body></html>"));
  client.println();
}
void handleClientCommands(String &currentLine, EthernetClient &client) {
  if (currentLine.endsWith("GET /?luzQuarto=ligar")) {
            luzQuarto = true;
            digitalWrite(pinoQuarto, HIGH);
          } else if (currentLine.endsWith("GET /?luzQuarto=desligar")) {
            luzQuarto = false;
            digitalWrite(pinoQuarto, LOW);
          } else if (currentLine.endsWith("GET /?luzVaranda=ligar")) {
            luzVaranda = true;
            digitalWrite(pinoVaranda, HIGH);
          } else if (currentLine.endsWith("GET /?luzVaranda=desligar")) {
            luzVaranda = false;
            digitalWrite(pinoVaranda, LOW);
          } else if (currentLine.endsWith("GET /?luzSala=ligar")) {
            luzSala = true;
            digitalWrite(pinoSala, HIGH);
          } else if (currentLine.endsWith("GET /?luzSala=desligar")) {
            luzSala = false;
            digitalWrite(pinoSala, LOW);
          } else if (currentLine.endsWith("GET /?luzCozinha=ligar")) {
            luzCozinha = true;
            digitalWrite(pinoCozinha, HIGH);
          } else if (currentLine.endsWith("GET /?luzCozinha=desligar")) {
            luzCozinha = false;
            digitalWrite(pinoCozinha, LOW);
          } else if (currentLine.endsWith("GET /?luzBanheiro=ligar")) {
            luzBanheiro = true;
            digitalWrite(pinoBanheiro, HIGH);
          } else if (currentLine.endsWith("GET /?luzBanheiro=desligar")) {
            luzBanheiro = false;
            digitalWrite(pinoBanheiro, LOW);
          } else if (currentLine.endsWith("GET /?luzGaragem=ligar")) {
            luzGaragem = true;
            digitalWrite(pinoGaragem, HIGH);
          } else if (currentLine.endsWith("GET /?luzGaragem=desligar")) {
            luzGaragem = false;
            digitalWrite(pinoGaragem, LOW);
          } else if (currentLine.endsWith("GET /?luzGeral=ligar")) {
            luzQuarto = true;
            digitalWrite(pinoQuarto, HIGH);
            luzVaranda = true;
            digitalWrite(pinoVaranda, HIGH);
            luzSala = true;
            digitalWrite(pinoSala, HIGH);
            luzCozinha = true;
            digitalWrite(pinoCozinha, HIGH);
            luzBanheiro = true;
            digitalWrite(pinoBanheiro, HIGH);
            luzGaragem = true;
            digitalWrite(pinoGaragem, HIGH);
          } else if (currentLine.endsWith("GET /?luzGeral=desligar")) {
            luzQuarto = false;
            digitalWrite(pinoQuarto, LOW);
            luzVaranda = false;
            digitalWrite(pinoVaranda, LOW);
            luzSala = false;
            digitalWrite(pinoSala, LOW);
            luzCozinha = false;
            digitalWrite(pinoCozinha, LOW);
            luzBanheiro = false;
            digitalWrite(pinoBanheiro, LOW);
            luzGaragem = false;
            digitalWrite(pinoGaragem, LOW);
          }
  
  // Alarme
  else if (currentLine.endsWith("GET /?alarm=Ligar%20Alarme")) {
    if (!estadoDoAlarme) {
      estadoDoAlarme = true;
      digitalWrite(pinoLaser, HIGH);
      tempoAtivacaoAlarme = millis();
    }
  } else if (currentLine.endsWith("GET /?alarm=Desligar%20Alarme")) {
    if (estadoDoAlarme) {
      estadoDoAlarme = false;
      digitalWrite(pinoLaser, LOW);
      noTone(pinoBuzzer);
    }
  }
  
  // Ventilador
  else if (currentLine.endsWith("GET /?ventilador=desligar")) {  
    digitalWrite(pinoVentilador, LOW);
  } else if (currentLine.endsWith("GET /?ventilador=ligarMin")) {
    digitalWrite(pinoVentilador, HIGH);
    analogWrite(pinoVelocidadeVentilador, 110);
  } else if (currentLine.endsWith("GET /?ventilador=ligarMed")) {
            digitalWrite(pinoVentilador, HIGH);
            analogWrite(pinoVelocidadeVentilador, 150);
  } else if (currentLine.endsWith("GET /?ventilador=ligarMax")) {
            digitalWrite(pinoVentilador, HIGH);
            analogWrite(pinoVelocidadeVentilador, 255);
  } else if (currentLine.endsWith("GET /?portaoGaragem=abrir")) {
             if (portaoGaragemFechado == true) {
              meuServo.attach(2); 
              meuServo.write(0);  
              delay(500);        
              meuServo.detach();  
              portaoGaragemFechado = false;
             }
  } else if (currentLine.endsWith("GET /?portaoGaragem=fechar")) {
             if (portaoGaragemFechado == false) {
              meuServo.attach(2);  
              meuServo.write(115);
              delay(500);         
              meuServo.detach();  
              portaoGaragemFechado = true;
             }
          }
  
    else if (currentLine.endsWith("GET /?portaoCasa=abrir")) {
      if (portaoCasaFechado == true) {
              abrirPortao();  // A função esta no final
              portaoCasaFechado = false;
            }  
  } else if (currentLine.endsWith("GET /?portaoCasa=fechar")) {
      if (portaoCasaFechado == false) {
              fecharPortao();  // A função esta no final
              portaoCasaFechado = true;
            }  
      }
}

void gerenciarAlarme(unsigned long tempoAtual) {
  if (estadoDoAlarme != estadoDoAlarmeAnterior) {
    if (estadoDoAlarme) {
      laserInterrompido = false;
      digitalWrite(pinoLaser, HIGH);
      tempoAtivacaoAlarme = tempoAtual;
      Serial.println("Alarme ligado.");
    } else {
      digitalWrite(pinoLaser, LOW);
      noTone(pinoBuzzer);
      Serial.println("Alarme desligado.");
    }
    estadoDoAlarmeAnterior = estadoDoAlarme;
  }

  if (estadoDoAlarme && (tempoAtual - tempoAtivacaoAlarme > 200)) {
    valorLdrLaser = analogRead(pinoLdrLaser);

    if (valorLdrLaser <= limiteLaser) {
      if (laserInterrompido) {
        laserInterrompido = false;
        Serial.print("Laser detectado! LDR: ");
        Serial.println(valorLdrLaser);
        noTone(pinoBuzzer);
      }
    } else {
      if (!laserInterrompido) {
        laserInterrompido = true;
        Serial.print("Laser interrompido!!! Casa invadida!! LDR: ");
        Serial.println(valorLdrLaser);
      }

      // Controle do buzzer
      if (tempoAtual - tempoUltimoApito > intervaloApito) {
        tempoUltimoApito = tempoAtual;
        bool buzzerLigado = (digitalRead(pinoBuzzer) == HIGH);
        if (buzzerLigado) {
          noTone(pinoBuzzer);
        } else {
          tone(pinoBuzzer, 2000);
        }
      }

      // Piscar luzes sem delay
      static bool luzesEstado = false;
      static unsigned long ultimoPiscar = 0;
      if (tempoAtual - ultimoPiscar > (luzesEstado ? 400 : 150)) {
        ultimoPiscar = tempoAtual;
        luzesEstado = !luzesEstado;
        digitalWrite(pinoQuarto, luzesEstado);
        digitalWrite(pinoVaranda, luzesEstado);
        digitalWrite(pinoSala, luzesEstado);
        digitalWrite(pinoCozinha, luzesEstado);
        digitalWrite(pinoBanheiro, luzesEstado);
        digitalWrite(pinoGaragem, luzesEstado);
      }
    }

    if (tempoAtual - tempoUltimaMensagem > intervaloMensagem) {
      tempoUltimaMensagem = tempoAtual;
      Serial.print(laserInterrompido ? "Laser interrompido!!! " : "Laser detectado. ");
      Serial.print("LDR: ");
      Serial.println(valorLdrLaser);
    }
  }
}

void controlarPostes() {
  valorLdrPostes = analogRead(pinoLdrPostes);
  bool postesLigados = (valorLdrPostes > limitePoste);
  digitalWrite(pinoPoste1, postesLigados ? HIGH : LOW);
  digitalWrite(pinoPoste2, postesLigados ? HIGH : LOW);
  
  static unsigned long ultimoLogPostes = 0;
  if (millis() - ultimoLogPostes > 5000) {
    ultimoLogPostes = millis();
    Serial.print(postesLigados ? "Noite, postes ligados. " : "Dia, postes desligados. ");
    Serial.print("Valor do LDR: ");
    Serial.println(valorLdrPostes);
  }
}

void detectarFogo() {
  int leituraFogo = digitalRead(sensorFogo);
  
  if (leituraFogo == estadoFogoAnterior) {
    estadoFogoAtual = leituraFogo;
  }
  estadoFogoAnterior = leituraFogo;
  
  if (estadoFogoAtual == LOW) {
    tone(pinoBuzzer, 2000);
  } else {
    noTone(pinoBuzzer);
  }
}

void detectarAgua(){
    int leituraChuva = digitalRead(sensorChuva);

    if (leituraChuva == estadoChuvaAnterior) {
        estadoChuvaAtual = leituraChuva;
    } 
    estadoChuvaAnterior = leituraChuva;

        if (estadoChuvaAtual == LOW && !varalRecolhido) {
            recolherVaral();
            varalRecolhido = true;  
        }
        else if (estadoChuvaAtual == HIGH && varalRecolhido) {
            estenderVaral();
            varalRecolhido = false;  
        }
  }

// -------------------------------------------------------------------------
// -------------- FUNÇÃO DE ABRIR E FECHAR PORTÃO DA CASA ------------------
// -------------------------------------------------------------------------
void abrirPortao() {
    unsigned long tempoDeAbrir = millis();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);
  }
}

void fecharPortao() {
    unsigned long tempoDeAbrir = millis();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, HIGH);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, LOW);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, HIGH);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, LOW);
    delay(velocidadePortao);

    digitalWrite(pinoPortaoCasa1, LOW);
    digitalWrite(pinoPortaoCasa2, LOW);
    digitalWrite(pinoPortaoCasa3, HIGH);
    digitalWrite(pinoPortaoCasa4, HIGH);
    delay(velocidadePortao);
  }
}

// -------------------------------------------------------------------------
// ------------ FUNÇÃO DE ABRIR E FECHAR PORTÃO DA GARAGEM ----------------
// -------------------------------------------------------------------------
void abrirPortaoGaragem() {
  if(portaoGaragemFechado) {
    portaoGaragemFechado = false;
    Serial.println("Abrindo garagem...");
    meuServo.attach(2);
    meuServo.write(0);
    delay(500);
    meuServo.detach();
    Serial.println("Garagem aberta!");
  }
}

void fecharPortaoGaragem() {
  if(!portaoGaragemFechado) {
    portaoGaragemFechado = true;
    Serial.println("Fechando garagem...");
    meuServo.attach(2);
    meuServo.write(115);
    delay(500);
    meuServo.detach();
    Serial.println("Garagem fechada!");
  }
}

void recolherVaral(){
    analogWrite(pinoEnableB, 160);
    digitalWrite(pinoVaral1, HIGH);
    digitalWrite(pinoVaral2, LOW);
    delay(5000);
    digitalWrite(pinoVaral1, LOW);
    digitalWrite(pinoVaral2, LOW);
}

void estenderVaral(){
    analogWrite(pinoEnableB, 160); 
    digitalWrite(pinoVaral1, LOW);
    digitalWrite(pinoVaral2, HIGH);
    delay(5000); 
    digitalWrite(pinoVaral1, LOW);
    digitalWrite(pinoVaral2, LOW);
}
