#include <SPI.h>
#include <Ethernet.h>
#include <Servo.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// ----------------------------- REDE -----------------------------------------
const byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
const IPAddress ip(192, 168, 2, 177);
EthernetServer server(80);

// ------------------------- PINOS DOS SERVOS ---------------------------------
const byte pinoServoPortaoGaragem = 2;
const byte pinoServoJanelaBanheiro = 5;
const byte pinoServoJanelaVaranda  = 6;
const byte pinoServoVaral          = 7;

// --------------------------- PINOS GERAIS -----------------------------------
const byte pinoPortaoCasa1 = 8;
const byte pinoPortaoCasa2 = 9;
const byte pinoPortaoCasa3 = 11;
const byte pinoPortaoCasa4 = 12;

const byte pinoLaser = 4;

const byte pinoQuarto   = 22;
const byte pinoVaranda  = 23;
const byte pinoSala     = 24;
const byte pinoCozinha  = 25;
const byte pinoBanheiro = 26;
const byte pinoGaragem  = 27;
const byte pinoPoste1   = 28;
const byte pinoPoste2   = 29;

const byte sensorChuva = 30;
const byte sensorFogo  = 31;

const byte pinoVentilador             = 32;
const byte pinoVelocidadeVentilador   = 3;
const byte pinoBuzzer                 = 33;
const byte pinoLdrLaser               = A0;
const byte pinoLdrPostes              = A1;

// --- Controle da tela de ALARME enquanto disparado ---
// true = LCD travado em "ALARME DISPARADO"
bool telaAlarmeVisivel = false;

// true = teclado ignorado por alerta de FOGO (independe de login/alarme)
bool tecladoBloqueadoPorFogo = false;

// ----------------------------- TECLADO --------------------------------------
const byte ROWS = 4;
const byte COLS = 4;

char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {34, 35, 36, 37};
byte colPins[COLS] = {41, 40, 39, 38};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
String bufferTecla = "";

// ------------------------------- LCD ----------------------------------------
LiquidCrystal_I2C lcd(0x27, 16, 2);

// ----------------------------- SEGURANÇA ------------------------------------
struct Usuario {
  String nome;
  String senha;
};

Usuario usuarios[] = {
  {"Rafael",   "997788"},
  {"Isabella", "123456"},
  {"William",  "130319"},
  {"Gasuwu",   "300303"}
};

String usuarioAtual = "";  // guarda quem está logado
String senhaAtual   = "";  // guarda a senha do usuário logado
unsigned long loginStartMillis = 0; // Tempo desde o login (em millis). 0 = ninguém logado

const int totalUsuarios = sizeof(usuarios) / sizeof(usuarios[0]);

String senhaDigitada = "";
int    tentativas    = 0;
bool   tecladoLiberado = false;

// ------------------------------- SERVOS -------------------------------------
Servo meuServo1;
Servo meuServo2;
Servo meuServo3;
Servo meuServo4;

// ------------------------------ VARIÁVEIS -----------------------------------
uint16_t valorLdrLaser   = 0;
uint16_t valorLdrPostes  = 0;
uint16_t valorSensorAgua = 0;
uint16_t valorSensorFogo = 0;

unsigned long tempoUltimaLeituraChuva = 0;
unsigned long tempoUltimaLeituraFogo  = 0;
unsigned long tempoUltimaLeituraLDR   = 0;

const uint16_t intervaloLeituraChuva = 1000;
const uint16_t intervaloLeituraFogo  = 300;
const uint16_t intervaloLeituraLDR   = 500;

byte estadoChuvaAtual = HIGH, estadoChuvaAnterior = HIGH;
byte estadoFogoAtual  = HIGH, estadoFogoAnterior  = HIGH;

byte velocidadePortao = 2;
const uint16_t portaoAbrirFechar = 12750;

const uint16_t limiteLaser = 450;
const uint16_t limitePoste = 930;

bool estadoDoAlarme        = false;
bool alertaAtivo           = false;
bool laserInterrompido     = false;
bool estadoDoAlarmeAnterior = false;
bool loginNaTela           = false;  // true = já estou mostrando a tela de Login

unsigned long tempoAtivacaoAlarme   = 0;
unsigned long tempoUltimoApitoAlarme = 0;
unsigned long tempoUltimoApitoFogo   = 0;
unsigned long tempoUltimaMensagem    = 0;

const uint16_t intervaloApito = 200;

bool portaoCasaFechado     = true;
bool portaoGaragemFechado  = true;
bool janelaBanheiroFechado = true;
bool janelaVarandaFechado  = true;
bool varalRecolhido        = true;
bool janelaAutomatica      = false;

bool luzQuarto   = false;
bool luzVaranda  = false;
bool luzSala     = false;
bool luzCozinha  = false;
bool luzBanheiro = false;
bool luzGaragem  = false;

// --- Controle de linha 2 do LCD (evita sobrescrita indevida)
unsigned long bloqueiaLinha2Ate = 0;

// --- Estados auxiliares automação chuva
bool emAjusteAuto = false;  // evita recursão em ajustes
inline bool estaChovendo() { return digitalRead(sensorChuva) == LOW; } // LOW = chuva

bool           aguardandoPosAtivar           = false;
unsigned long  quandoChecarEstadoPosAtivar   = 0;
const unsigned long atrasoMsgAtivar          = 1200; // tempo manter "AUTOMACAO ATIVADA" antes do status

byte           proximaAcaoChuva   = 0;       // 0 = nada, 1 = FECHAR, 2 = ABRIR
unsigned long  quandoExecutarAcao = 0;       // timestamp para executar ação agendada
const unsigned long atrasoMsgChuva = 1500;    // quanto tempo a mensagem fica no LCD

// --------------------------- PROTÓTIPOS OPCIONAIS ---------------------------
// (úteis para o compilador do Arduino quando há referências com const String&)
void mostrarMensagem(String msg);
void mostrarBemVindo(String nome);
void mostrarTelaBloqueio();
void mostrarSenhaIncorreta(int tentativa);
void mostrarAlarmeDisparado();
void mostrarAcessoBloqueado();
void desenharTelaLogin();
void atualizarSenhaNoLCD(const String& senha);
void desenharTelaComando();
void atualizarComandoNoLCD(const String& cmd);
void mostrarDuasLinhas(const String& l1, const String& l2);
void forcarFechado(Servo &s, byte pin, int anguloFechado);
void garantirServosFechados();
void acionarPeloEstadoAtualDaChuva(bool mostrar);
void gerenciarAlarme(unsigned long tempoAtual);
void processarServidorWeb();
void handleSensorsRequest(EthernetClient &client);
void handleRootRequest(EthernetClient &client);
void handleClientCommands(String &currentLine, EthernetClient &client);
void controlarPostes();
void detectarFogo();
void detectarAgua();
void executarComando(String cmd);
void responderOk(EthernetClient &client);
void abrirPortao();
void fecharPortao();
void abrirPortaoGaragem();
void fecharPortaoGaragem();
void abrirJanelaBanheiro();
void fecharJanelaBanheiro();
void abrirJanelaVaranda();
void fecharJanelaVaranda();
void estenderVaral();
void recolherVaral();
void ligarTodasLuzes();
void desligarTodasLuzes();
void ligarPinos();
void desligarPinos();
void ligarTodasLuzesSilencioso();
void desligarTodasLuzesSilencioso();
void mostrarInfoLoginLCD();

// ---------------------------------------------------------------------------
// ------------------------------- FUNÇÕES LCD -------------------------------
// ---------------------------------------------------------------------------
void mostrarMensagem(String msg) {
  if (telaAlarmeVisivel) return;             // Não deixa nada apagar "ALARME DISPARADO"
  if (millis() < bloqueiaLinha2Ate) return;  // Não deixa atropelar a 2ª linha

  loginNaTela = false;
  Serial.println(msg);

  lcd.clear();
  lcd.setCursor(0, 0);

  if (msg.length() > 16) {
    lcd.print(msg.substring(0, 16));
    lcd.setCursor(0, 1);
    lcd.print(msg.substring(16, 32));
  } else {
    lcd.print(msg);
  }

  tempoUltimaMensagem = millis();
}

void mostrarBemVindo(String nome) {
  loginNaTela = false;

  lcd.clear();

  String msg1 = "Bem-vindo";
  int pos1 = (16 - msg1.length()) / 2;
  lcd.setCursor(pos1, 0);
  lcd.print(msg1);

  // Centraliza nome
  int pos2 = (16 - nome.length()) / 2;
  lcd.setCursor(pos2, 1);
  lcd.print(nome);

  Serial.println("Login: " + nome);
}

void mostrarTelaBloqueio() {
  desenharTelaLogin();  // mantém "Digite a senha:" em cima e "Login:" embaixo
  loginNaTela = true;
}

void mostrarSenhaIncorreta(int tentativa) {
  loginNaTela = false;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Senha incorreta!");
  lcd.setCursor(0, 1);

  String msg = "Tentativa: " + String(tentativa) + "/3";
  lcd.print(msg);
  Serial.println(msg);
}

void mostrarAlarmeDisparado() {
  loginNaTela = false;

  lcd.clear();

  String linha1 = "ALARME";
  String linha2 = "DISPARADO";

  int pos1 = (16 - linha1.length()) / 2;
  int pos2 = (16 - linha2.length()) / 2;

  lcd.setCursor(pos1, 0);
  lcd.print(linha1);

  lcd.setCursor(pos2, 1);
  lcd.print(linha2);

  Serial.println("ALARME DISPARADO!!!");
}

void mostrarAcessoBloqueado() {
  loginNaTela = false;

  lcd.clear();
  String linha1 = "ACESSO";
  String linha2 = "BLOQUEADO";

  int pos1 = (16 - linha1.length()) / 2;
  int pos2 = (16 - linha2.length()) / 2;

  lcd.setCursor(pos1, 0);
  lcd.print(linha1);
  lcd.setCursor(pos2, 1);
  lcd.print(linha2);

  Serial.println(F("ACESSO BLOQUEADO!"));
}

// ---------- LOGIN LCD ----------
const byte LCD_COLS        = 16;
const byte LOGIN_INPUT_COL = 7;  // "Login: " tem 7 caracteres

void desenharTelaLogin() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite a senha.");
  lcd.setCursor(0, 1);
  lcd.print("Login: ");
}

void atualizarSenhaNoLCD(const String& senha) {
  if (telaAlarmeVisivel) return;
  lcd.setCursor(LOGIN_INPUT_COL, 1);
  // limpa a área de digitação (do col 7 até o fim da linha)
  for (byte i = LOGIN_INPUT_COL; i < LCD_COLS; i++) lcd.print(' ');
  lcd.setCursor(LOGIN_INPUT_COL, 1);
  lcd.print(senha);
}

// --- Tela de comando (cabeçalho fixo sem apagar a linha 2)
void desenharTelaComando() {
  if (millis() < bloqueiaLinha2Ate) return;  // não apaga as duas linhas
  loginNaTela = false;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite o comando");
  // Não mexe na linha 2 (buffer do comando)
}

// --- Atualiza a linha 2 com o comando (sem limpar a tela toda)
void atualizarComandoNoLCD(const String& cmd) {
  if (telaAlarmeVisivel) return;
  if (millis() < bloqueiaLinha2Ate) return;  // impede sobrescrever a 2ª linha

  lcd.setCursor(0, 1);
  lcd.print("                ");  // limpa só a linha 2
  lcd.setCursor(0, 1);
  lcd.print(cmd);
  tempoUltimaMensagem = millis();  // qualquer digitação renova o timer
}

void mostrarDuasLinhas(const String& l1, const String& l2) {
  if (telaAlarmeVisivel) return;  // não sobrescreve tela de alarme
  loginNaTela = false;

  lcd.clear();

  int pos1 = (16 - l1.length()) / 2;  // centraliza (corta se passar de 16)
  if (pos1 < 0) pos1 = 0;
  lcd.setCursor(pos1, 0);
  lcd.print(l1.substring(0, 16));

  int pos2 = (16 - l2.length()) / 2;
  if (pos2 < 0) pos2 = 0;
  lcd.setCursor(pos2, 1);
  lcd.print(l2.substring(0, 16));

  Serial.println(l1 + " " + l2);
  tempoUltimaMensagem = millis();  // garante retorno a “Digite o comando”
}

// ---------------------------------------------------------------------------
// -------------------------- AJUSTES INICIAIS SERVOS ------------------------
// ---------------------------------------------------------------------------
void forcarFechado(Servo &s, byte pin, int anguloFechado) {
  s.attach(pin);
  delay(100);
  s.write(anguloFechado);
  delay(800);  // tempo para o servo chegar
  s.detach();
  delay(50);
}

// garante todos os servos em "fechado" no boot
void garantirServosFechados() {
  // ANGULOS DE FECHADO (coerentes com suas funções)
  // Garagem: fechar = 165
  forcarFechado(meuServo1, pinoServoPortaoGaragem, 165);
  portaoGaragemFechado = true;

  // Janela Banheiro: fechar = 120
  forcarFechado(meuServo2, pinoServoJanelaBanheiro, 120);
  janelaBanheiroFechado = true;

  // Janela Varanda: fechar = 0
  forcarFechado(meuServo3, pinoServoJanelaVaranda, 0);
  janelaVarandaFechado = true;

  // Varal: recolhido (fechado) = 180
  forcarFechado(meuServo4, pinoServoVaral, 180);
  varalRecolhido = true;

  Serial.println(F("Servos posicionados em FECHADO no boot."));
}

void acionarPeloEstadoAtualDaChuva(bool mostrar = true) {
  int leitura = digitalRead(sensorChuva);  // LOW = chuva
  if (leitura == LOW) {
    if (mostrar) mostrarDuasLinhas("CHUVA", "DETECTADA!!"); 
    proximaAcaoChuva = 1;  // fechar/recolher
  } else {
    if (mostrar) mostrarDuasLinhas("SEM", "CHUVA!!");
    proximaAcaoChuva = 2;  // abrir/estender
  }
  quandoExecutarAcao = millis() + atrasoMsgChuva;
}

void mostrarInfoLoginLCD() {
  if (telaAlarmeVisivel) return;   // não sobrescreve tela de alarme
  loginNaTela = false;

  lcd.clear();

  // Nome do usuário (ou -----) — não truncar aqui
  String nome = (usuarioAtual.length() > 0) ? usuarioAtual : "-----";

  // Calcula tempo mm:ss (ou --:--)
  bool temLogin = (usuarioAtual.length() > 0 && loginStartMillis > 0);
  unsigned long mm = 0, ss = 0;
  if (temLogin) {
    unsigned long elapsed = (millis() - loginStartMillis) / 1000UL;
    mm = elapsed / 60UL;
    ss = elapsed % 60UL;
    if (mm > 99) mm = 99; // limita a 99 min para caber no LCD
  }

  // Linha 1 com fallback: tenta "Usuario: " primeiro, senão usa "User: "
  const char* labelFull  = "Usuario: ";  // 9 caracteres (inclui espaço)
  const char* labelShort = "User: ";     // 6 caracteres (inclui espaço)
  const uint8_t LCD_COLS = 16;
  const uint8_t lenFull  = 9;  // strlen("Usuario: ")
  const uint8_t lenShort = 6;  // strlen("User: ")

  lcd.setCursor(0, 0);
  if (lenFull + nome.length() <= LCD_COLS) {
    // Cabe "Usuario: " + nome
    lcd.print(labelFull);
    lcd.print(nome);
  } else if (lenShort + nome.length() <= LCD_COLS) {
    // Cabe com "User: " sem cortar o nome
    lcd.print(labelShort);
    lcd.print(nome);
  } else {
    // Não cabe nem com "User: " → corta só o nome para caber
    lcd.print(labelShort);
    uint8_t maxNome = LCD_COLS - lenShort; // 10 colunas
    lcd.print(nome.substring(0, maxNome));
  }

  // Linha 2: Tempo Log: mm:ss  (exatamente 16 colunas quando há tempo)
  lcd.setCursor(0, 1);
  if (temLogin) {
    lcd.print("Tempo Log: ");
    if (mm < 10) lcd.print('0');
    lcd.print(mm);
    lcd.print(':');
    if (ss < 10) lcd.print('0');
    lcd.print(ss);
  } else {
    lcd.print("Tempo Log: --:--");
  }

  // Mantém a tela por ~2,5s (segue a mesma lógica das outras mensagens)
  tempoUltimaMensagem = millis();
  bloqueiaLinha2Ate   = millis() + 2000; // evita sobrescrita imediata da 2ª linha
}

inline void flushTeclado() { while (keypad.getKey()) { /* descarta */ } }
// ---------------------------------------------------------------------------
// --------------------------------- SETUP -----------------------------------
// ---------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();

  lcd.init();
  lcd.backlight();
  desenharTelaLogin();

  // Configura pinos das lâmpadas
  for (byte pino = 22; pino <= 29; pino++) {
    pinMode(pino, OUTPUT);
    digitalWrite(pino, LOW);
  }

  pinMode(pinoBuzzer, OUTPUT);
  digitalWrite(pinoBuzzer, LOW);

  pinMode(pinoLdrLaser, INPUT);
  pinMode(pinoLdrPostes, INPUT);
  pinMode(pinoLaser, OUTPUT);
  digitalWrite(pinoLaser, LOW);

  pinMode(sensorChuva, INPUT);
  pinMode(sensorFogo, INPUT);

  pinMode(pinoVentilador, OUTPUT);
  pinMode(pinoVelocidadeVentilador, OUTPUT);

  // Garante tudo fechado ao ligar
  garantirServosFechados();

  // Mensagem de inicialização
  mostrarMensagem(" -- Servidor --  -- iniciado -- ");
  delay(5000);  // fica 5 segundos na tela

  // Tela padrão de bloqueio
  mostrarTelaBloqueio();
}

// ---------------------------------------------------------------------------
// --------------------------------- LOOP ------------------------------------
// ---------------------------------------------------------------------------
void loop() {
  unsigned long tempoAtual = millis();

  // =================== TECLADO ===================
  char tecla = keypad.getKey();

  // Se o alarme de invasão está travando o LCD ou o fogo está ativo, ignore o teclado
  if (telaAlarmeVisivel || tecladoBloqueadoPorFogo) {
    // drena eventos para não “sobrar” tecla quando liberar
    flushTeclado();        // (se não quiser a função, use o while(getKey()) aqui)
    tecla = 0;             // nada será processado abaixo
  }

  // Se a tela de alarme está travada, ignora qualquer digitação
  if (telaAlarmeVisivel) {
    tecla = 0;
    senhaDigitada = "";
    bufferTecla  = "";
  }

  if (tecla) {
    tempoUltimaMensagem = millis();  // renova o timer a cada tecla
  }

  // ------------------- MODO LOGIN -------------------
  if (!tecladoLiberado && tecla) {
    if (tecla == 'D') {  // backspace senha
      if (senhaDigitada.length() > 0) {
        senhaDigitada.remove(senhaDigitada.length() - 1);
        atualizarSenhaNoLCD(senhaDigitada);
      }
    } else if (tecla == 'C') {  // confirmar senha
      bool   senhaValida   = false;
      String usuarioLogado = "";

      for (int i = 0; i < totalUsuarios; i++) {
        if (senhaDigitada == usuarios[i].senha) {
          senhaValida   = true;
          usuarioLogado = usuarios[i].nome;
          break;
        }
      }

      if (senhaValida) {
        tecladoLiberado = true;
        loginStartMillis = millis();
        usuarioAtual    = usuarioLogado;
        senhaAtual      = senhaDigitada;
        tentativas      = 0;
        senhaDigitada   = "";

        mostrarBemVindo(usuarioLogado);
        delay(2500);
        desenharTelaComando();     // título sem apagar a linha 2
        atualizarComandoNoLCD(""); // garante linha 2 vazia
        tempoUltimaMensagem = millis();

      } else {
        tentativas++;
        senhaDigitada = "";

        if (tentativas < 3) {
          // Mostra tentativa atual (1/3 ou 2/3)
          mostrarSenhaIncorreta(tentativas);
          delay(2000);
          mostrarTelaBloqueio();
        } else {
          // Tentativa 3/3 → bloqueio + buzzer 3 segundos
          mostrarSenhaIncorreta(tentativas);
          delay(2000);
          mostrarAcessoBloqueado();

          tone(pinoBuzzer, 2000);
          delay(3000);
          noTone(pinoBuzzer);

          tentativas = 0;
          mostrarTelaBloqueio();
        }
      }
    } else {  // acumula senha
      senhaDigitada += tecla;
      atualizarSenhaNoLCD(senhaDigitada);
    }
  }

  // ------------------- MODO COMANDO -------------------
  if (tecladoLiberado && tecla) {
    if (tecla == 'D') {  // backspace comando
      if (bufferTecla.length() > 0) {
        bufferTecla.remove(bufferTecla.length() - 1);
        atualizarComandoNoLCD(bufferTecla);
      }
    } else if (tecla == 'C') {  // confirmar comando
      if (bufferTecla.length() > 0) {
        // logout se a senha usada no login for digitada de novo
        if (bufferTecla == senhaAtual) {
          loginStartMillis = 0;
          tecladoLiberado = false;
          usuarioAtual = "";
          senhaAtual   = "";
          bufferTecla  = "";
          mostrarTelaBloqueio();
        } else {
          executarComando(bufferTecla);
          bufferTecla = "";
          if (millis() >= bloqueiaLinha2Ate) {
            atualizarComandoNoLCD("");
          }
        }
      }
    } else {  // acumula comando
      bufferTecla += tecla;
      atualizarComandoNoLCD(bufferTecla);
    }
  }

  // ------------------- SENSORES -------------------
  if (tempoAtual - tempoUltimaLeituraLDR > intervaloLeituraLDR) {
    tempoUltimaLeituraLDR = tempoAtual;
    controlarPostes();
  }
  if (tempoAtual - tempoUltimaLeituraFogo > intervaloLeituraFogo) {
    tempoUltimaLeituraFogo = tempoAtual;
    detectarFogo();
  }
  if (tempoAtual - tempoUltimaLeituraChuva > intervaloLeituraChuva) {
    tempoUltimaLeituraChuva = tempoAtual;
    detectarAgua();
  }

  // NUNCA APAGAR O QUE ESTÁ SENDO DIGITADO (mantém comando visível)
  if (tecladoLiberado && (millis() - tempoUltimaMensagem > 2500)) {
    desenharTelaComando();                    // reescreve o título
    if (millis() >= bloqueiaLinha2Ate) {
      atualizarComandoNoLCD(bufferTecla);     // restaura o que já foi digitado
    }
  }

  if (!tecladoLiberado &&
      !telaAlarmeVisivel &&
      (millis() - tempoUltimaMensagem > 2000) &&
      !loginNaTela) {
    // Qualquer mensagem mostrada por ações WEB/Sensores some após ~2s e voltamos ao login
    mostrarTelaBloqueio();
  }

  // ------------------- ALARME E SERVIDOR -------------------
  gerenciarAlarme(tempoAtual);
  processarServidorWeb();

  if (janelaAutomatica && aguardandoPosAtivar && millis() >= quandoChecarEstadoPosAtivar) {
    aguardandoPosAtivar = false;
    acionarPeloEstadoAtualDaChuva(true);  // mostra o status e agenda FECHAR/ABRIR
    bloqueiaLinha2Ate = millis() + 2000;  // protege a linha por mais um tempinho
  }
}

// ---------------------------------------------------------------------------
// --------------------------- GERENCIAR ALARME ------------------------------
// ---------------------------------------------------------------------------
void gerenciarAlarme(unsigned long tempoAtual) {
  if (estadoDoAlarme != estadoDoAlarmeAnterior) {
    if (estadoDoAlarme) {
      laserInterrompido = false;
      digitalWrite(pinoLaser, HIGH);
      tempoAtivacaoAlarme = tempoAtual;
      Serial.println(F("Alarme ligado."));
      mostrarDuasLinhas("ALARME", "LIGADO"); 
      bloqueiaLinha2Ate = millis() + 2000;
    } else {
      digitalWrite(pinoLaser, LOW);
      noTone(pinoBuzzer);
      alertaAtivo = false;  // garante limpeza
      Serial.println(F("Alarme desligado."));
      telaAlarmeVisivel = false;  // libera o LCD
      mostrarDuasLinhas("ALARME", "DESLIGADO");
      bloqueiaLinha2Ate = millis() + 2000;
    }
    estadoDoAlarmeAnterior = estadoDoAlarme;
  }

  // Se o alarme está ligado, monitora o laser (com pequeno atraso de armamento)
  if (estadoDoAlarme && (tempoAtual - tempoAtivacaoAlarme > 200)) {
    valorLdrLaser = analogRead(pinoLdrLaser);

    if (valorLdrLaser <= limiteLaser) {
      // Laser OK (não interrompido)
      if (laserInterrompido) {
        // Transição: de interrompido -> normal
        laserInterrompido = false;
        alertaAtivo = false;  // limpa flag do alerta único
        Serial.print(F("Laser normalizado. LDR: "));
        Serial.println(valorLdrLaser);
        noTone(pinoBuzzer);
        desligarTodasLuzes();
      }
    } else {
      // Laser interrompido (DISPARO)
      if (!laserInterrompido) {
        laserInterrompido = true;
        alertaAtivo = true;  // flag para alerta único na página
        Serial.print(F("Laser interrompido!!! Casa invadida!! LDR: "));
        Serial.println(valorLdrLaser);
        
        // Impede outras mensagens de sobrescreverem o LCD
        telaAlarmeVisivel = true;

        // Desloga o usuário
        tecladoLiberado = false;
        usuarioAtual = "";
        loginStartMillis = 0;
        senhaAtual   = "";
        bufferTecla  = "";
        senhaDigitada = "";

        mostrarAlarmeDisparado();  // trava visual
        // Aciona imediatamente sem esperar o primeiro intervalo:
        tone(pinoBuzzer, 2000);
        ligarTodasLuzesSilencioso();
        // zera/joga o timer para agora, assim o próximo toggle vem no tempo certo
        tempoUltimoApitoAlarme = tempoAtual;
      }

      // Sinalização sonora/visual enquanto estiver disparando
      if (tempoAtual - tempoUltimoApitoAlarme >= intervaloApito) {
        tempoUltimoApitoAlarme = tempoAtual;
        static bool buzzerOn = false;
        buzzerOn = !buzzerOn;

        if (buzzerOn) {
          tone(pinoBuzzer, 2000);            // sem duração, fica ligado até o noTone()
          ligarTodasLuzesSilencioso();       // não registra no Serial/LCD
        } else {
          noTone(pinoBuzzer);
          desligarTodasLuzesSilencioso();    // não registra no Serial/LCD
        }
      }
    }
  }

  // Se a tela de alarme está visível, mas o disparo acabou (laser voltou) OU o alarme foi desligado,
  // volta automaticamente para a tela de login.
  if (telaAlarmeVisivel && (!estadoDoAlarme || valorLdrLaser <= limiteLaser)) {
    telaAlarmeVisivel = false;
    mostrarTelaBloqueio();  // "Digite a senha." / "Login: "
  }
}

// ---------------------------------------------------------------------------
// ---------------------------- EXECUTAR COMANDO -----------------------------
// ---------------------------------------------------------------------------
void executarComando(String cmd) {
  // Luzes
  if (cmd == "1*") { luzQuarto   = true;  digitalWrite(pinoQuarto,   HIGH); mostrarMensagem("Luz Quarto ON"); }
  else if (cmd == "1#") { luzQuarto   = false; digitalWrite(pinoQuarto,   LOW);  mostrarMensagem("Luz Quarto OFF"); }

  else if (cmd == "2*") { luzVaranda  = true;  digitalWrite(pinoVaranda,  HIGH); mostrarMensagem("Luz Varanda ON"); }
  else if (cmd == "2#") { luzVaranda  = false; digitalWrite(pinoVaranda,  LOW);  mostrarMensagem("Luz Varanda OFF"); }

  else if (cmd == "3*") { luzSala     = true;  digitalWrite(pinoSala,     HIGH); mostrarMensagem("Luz Sala ON"); }
  else if (cmd == "3#") { luzSala     = false; digitalWrite(pinoSala,     LOW);  mostrarMensagem("Luz Sala OFF"); }

  else if (cmd == "4*") { luzCozinha  = true;  digitalWrite(pinoCozinha,  HIGH); mostrarMensagem("Luz Cozinha ON"); }
  else if (cmd == "4#") { luzCozinha  = false; digitalWrite(pinoCozinha,  LOW);  mostrarMensagem("Luz Cozinha OFF"); }

  else if (cmd == "5*") { luzBanheiro = true;  digitalWrite(pinoBanheiro, HIGH); mostrarMensagem("Luz Banheiro ON"); }
  else if (cmd == "5#") { luzBanheiro = false; digitalWrite(pinoBanheiro, LOW);  mostrarMensagem("Luz Banheiro OFF"); }

  else if (cmd == "6*") { luzGaragem  = true;  digitalWrite(pinoGaragem,  HIGH); mostrarMensagem("Luz Garagem ON"); }
  else if (cmd == "6#") { luzGaragem  = false; digitalWrite(pinoGaragem,  LOW);  mostrarMensagem("Luz Garagem OFF"); }

  else if (cmd == "7*") { ligarTodasLuzes(); }
  else if (cmd == "7#") { desligarTodasLuzes(); }

  // Portões
  else if (cmd == "8*") { abrirPortao(); }
  else if (cmd == "8#") { fecharPortao(); }

  else if (cmd == "9*") { abrirPortaoGaragem(); }
  else if (cmd == "9#") { fecharPortaoGaragem(); }

  // Varal
  else if (cmd == "0*") { estenderVaral(); }
  else if (cmd == "0#") { recolherVaral(); }

  // Janelas
  else if (cmd == "A*") { abrirJanelaVaranda(); }
  else if (cmd == "A#") { fecharJanelaVaranda(); }
  else if (cmd == "B*") { abrirJanelaBanheiro(); }
  else if (cmd == "B#") { fecharJanelaBanheiro(); }
  else if (cmd == "AB*") { abrirJanelaBanheiro(); abrirJanelaVaranda(); }
  else if (cmd == "AB#") { fecharJanelaBanheiro(); fecharJanelaVaranda(); }

  // Alarme
  else if (cmd == "*") { estadoDoAlarme = true;  digitalWrite(pinoLaser, HIGH); mostrarDuasLinhas("ALARME", "LIGADO"); bloqueiaLinha2Ate = millis() + 2000;}
  else if (cmd == "#") { estadoDoAlarme = false; alertaAtivo = false; digitalWrite(pinoLaser, LOW); noTone(pinoBuzzer); mostrarDuasLinhas("ALARME", "DESLIGADO");bloqueiaLinha2Ate = millis() + 2000; }

  // Ventilador
  else if (cmd == "1") { digitalWrite(pinoVentilador, HIGH); analogWrite(pinoVelocidadeVentilador, 100); mostrarMensagem("Ventilador Min"); }
  else if (cmd == "2") { digitalWrite(pinoVentilador, HIGH); analogWrite(pinoVelocidadeVentilador, 140); mostrarMensagem("Ventilador Med"); }
  else if (cmd == "3") { digitalWrite(pinoVentilador, HIGH); analogWrite(pinoVelocidadeVentilador, 255); mostrarMensagem("Ventilador Max"); }
  else if (cmd == "0") { digitalWrite(pinoVentilador, LOW); mostrarMensagem("Ventilador OFF"); }

  // Automação da chuva
  else if (cmd == "**") {janelaAutomatica = true;mostrarDuasLinhas("AUTOMACAO", "ATIVADA");aguardandoPosAtivar = true;quandoChecarEstadoPosAtivar = millis() + atrasoMsgAtivar;bloqueiaLinha2Ate = millis() + 2000;}  // segura a linha 2}
  else if (cmd == "##") {janelaAutomatica = false;mostrarDuasLinhas("AUTOMACAO", "DESATIVADA");proximaAcaoChuva = 0;aguardandoPosAtivar = false;bloqueiaLinha2Ate = millis() + 2000;}

  //Easter Egg
  else if (cmd == "13") {mostrarDuasLinhas("CALANGUINHO FAZ", "CALANGUINHO O L"); bloqueiaLinha2Ate = millis() + 2000;}
  else if (cmd == "22") {mostrarDuasLinhas("IMBROXAVEL TA OK?", "SOU ANGOLANO ;-;"); bloqueiaLinha2Ate = millis() + 2000; }
  else if (cmd == "777") {mostrarDuasLinhas("  E O BRAZINO", " JOGO DA GALERA "); bloqueiaLinha2Ate = millis() + 2000; }
  else if (cmd == "30") {mostrarDuasLinhas("Wpp: 987640402", "Insta: all__wu"); bloqueiaLinha2Ate = millis() + 2000; }
  else if (cmd == "24") {mostrarDuasLinhas("Joab volte!! est", "amos com saudade"); bloqueiaLinha2Ate = millis() + 2000; }

  // Mostrar info de login no LCD
  else if (cmd == "*#") {mostrarInfoLoginLCD();}

  else {mostrarMensagem("Comando invalido");}
}

// ---------------------------------------------------------------------------
// ---------------------------- RESPOSTA HTTP OK -----------------------------
// ---------------------------------------------------------------------------
void responderOk(EthernetClient &client) {
  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: text/plain"));
  client.println(F("Connection: close"));
  client.println();
  client.println(F("OK"));
}

// ---------------------------------------------------------------------------
// -------------------------- SERVIDOR WEB (HTTP) ----------------------------
// ---------------------------------------------------------------------------
void processarServidorWeb() {
  EthernetClient client = server.available();
  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.startsWith("GET /sensors")) {
            handleSensorsRequest(client);
            break;
          } else if (currentLine.startsWith("GET /?")) {  // responde ações AJAX
            responderOk(client);
            break;
          } else if (currentLine.length() == 0) {
            handleRootRequest(client);
            break;
          }
          currentLine = "";
        } else if (c != '\r') {
          currentLine += c;
          handleClientCommands(currentLine, client);
        }
      }
    }
    client.stop();
  }
}

void handleSensorsRequest(EthernetClient &client) {
  valorSensorAgua = digitalRead(sensorChuva);
  valorSensorFogo = digitalRead(sensorFogo);

  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: application/json"));
  client.println(F("Connection: close"));
  client.println();

  // tempo em segundos desde o login; -1 quando ninguém logado
  long tempoSeg = -1;
  if (usuarioAtual.length() > 0 && loginStartMillis > 0) {
    tempoSeg = (long)((millis() - loginStartMillis) / 1000UL);
  }

  client.print(F("{"));
  client.print(F("\"fogo\":"));          client.print(valorSensorFogo == HIGH ? 0 : 1);
  client.print(F(",\"chuva\":"));        client.print(valorSensorAgua == HIGH ? 0 : 1);
  client.print(F(",\"automatico\":"));   client.print(janelaAutomatica ? 1 : 0);
  client.print(F(",\"alarme\":"));       client.print(estadoDoAlarme ? 1 : 0);
  client.print(F(",\"usuario\":\""));    client.print(usuarioAtual); client.print(F("\""));
  client.print(F(",\"tempo\":"));        client.print(tempoSeg);
  client.print(F(",\"alerta\":\""));

  bool disparoAgora = (estadoDoAlarme && analogRead(pinoLdrLaser) > limiteLaser);
  if (alertaAtivo && disparoAgora) {
    client.print(F("LASER INTERROMPIDO!! CASA INVADIDA!!!!"));
    alertaAtivo = false;  // mostra só uma vez
  }
  client.println(F("\"}"));
}

void handleRootRequest(EthernetClient &client) {
  // Leia os sensores antes de montar a página:
  valorSensorAgua = digitalRead(sensorChuva);
  valorSensorFogo = digitalRead(sensorFogo);

  // Cabeçalho HTTP
  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: text/html"));
  client.println(F("Connection: close"));
  client.println();

  // Início do HTML
  client.println(F("<!DOCTYPE html><html>"));
  client.println(F("<head>"));
  client.println(F("<meta charset='UTF-8'>"));
  client.println(F("<meta name='viewport' content='width=device-width, initial-scale=1.0'>"));
  client.println(F("<title>Casa automatizada</title>"));

  // CSS
  client.println(F("<style>"));
  client.println(F("body {"));
  client.println(F("  font-family: Arial, sans-serif;"));
  client.println(F("  background-color: #343541;"));
  client.println(F("  color: #ffffff;"));
  client.println(F("  text-align: center;"));
  client.println(F("  padding: 20px;"));
  client.println(F("  margin: 0;"));
  client.println(F("}"));
  client.println(F(".container {"));
  client.println(F("  background-color: #444654;"));
  client.println(F("  padding: 20px;"));
  client.println(F("  border-radius: 10px;"));
  client.println(F("  box-shadow: 0px 0px 10px rgba(0,0,0,0.3);"));
  client.println(F("  max-width: 1000px;"));
  client.println(F("  margin: 0 auto;"));
  client.println(F("  display: flex;"));
  client.println(F("  flex-wrap: wrap;"));
  client.println(F("  gap: 65px;"));
  client.println(F("  color: #ffffff;"));
  client.println(F("}"));
  client.println(F(".column {"));
  client.println(F("  flex: 1 1 400px;"));
  client.println(F("  padding: 0 10px;"));
  client.println(F("}"));
  client.println(F("h1, h2 { color: #ffffff; margin-bottom: 10px; }"));
  client.println(F(".row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; padding: 8px; }"));
  client.println(F(".row:nth-child(even) { background-color: #555666; }"));
  client.println(F(".label { font-weight: bold; width: 100px; text-align: left; white-space: nowrap; }"));
  client.println(F("button { padding: 8px 12px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; white-space: nowrap; }"));
  client.println(F(".ligar { background-color: #218838; color: white; }"));
  client.println(F(".desligar { background-color: #c82333; color: white; }"));
  client.println(F(".ligarVent { display: inline-block; width: 32%; background-color: #218838; color: white; margin: 1%; border-radius: 8px; }"));
  client.println(F(".desligarVent { display: block; background-color: #c82333; color: white; width: 100%; margin: 5px 0; border-radius: 10px; }"));
  client.println(F(".button-row { display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 10px; gap: 10px; }"));
  client.println(F(".ligarAlarme, .desligarAlarme, .abrir, .fechar { flex: 1; min-width: 120px; margin: 5px; padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 10px; color: white; }"));
  client.println(F(".ligarAlarme, .abrir { background-color: #218838; }"));
  client.println(F(".desligarAlarme, .fechar { background-color: #c82333; }"));
  client.println(F(".sensores-container { border: 2px solid #999; border-radius: 10px; padding: 15px; margin-top: 20px; background-color: #2e2e3a; }"));
  client.println(F(".sensor-fogo::before { content: '🔥 '; font-size: 20px; }"));
  client.println(F(".sensor-chuva::before { content: '💧 '; font-size: 20px; }"));
  client.println(F(".row button.ligar, .row button.desligar { width: 30%; font-size: 16px; }"));

  // Bloco de login/tempo dentro do container (centralizado) + frases maiores
  client.println(F(".logininfo{flex:1 1 100%; text-align:center; margin-bottom:10px;}"));
  client.println(F(".logininfo h2{margin:0 0 8px;}"));
  client.println(F(".loginline{font-size:20px; font-weight:600; margin:0 0 6px;}")); // maior que os botões (16px)

  client.println(F("</style>"));

  // JavaScript
  client.println(F("<script>"));
  client.println(F("function sendCommand(command){"));
  client.println(F("  var xhttp=new XMLHttpRequest();"));
  client.println(F("  xhttp.onreadystatechange=function(){if(this.readyState==4&&this.status==200){console.log('Sent '+command);}};"));
  client.println(F("  xhttp.open('GET','/?'+command,true); xhttp.send();"));
  client.println(F("}"));
  client.println(F("function updateSensors(){"));
  client.println(F("  var x=new XMLHttpRequest();"));
  client.println(F("  x.onreadystatechange=function(){"));
  client.println(F("    if(this.readyState==4&&this.status==200){"));
  client.println(F("      var data=JSON.parse(this.responseText);"));
  client.println(F("      document.getElementById('statusFogo').innerText = data.fogo ? 'FOGO DETECTADO!!' : 'Sem fogo.';"));
  client.println(F("      document.getElementById('statusChuva').innerText = data.chuva ? 'CHUVA DETECTADA!!' : 'Sem chuva.';"));
  client.println(F("      document.getElementById('statusAutomatico').innerText = data.automatico ? 'Ligada' : 'Desligada';"));
  client.println(F("      document.getElementById('statusAlarme').innerText = data.alarme ? 'Ligado' : 'Desligado';"));
  client.println(F("      // Usuário + tempo"));
  client.println(F("      var nome=(data.usuario&&data.usuario.length)?data.usuario:'-----';"));
  client.println(F("      document.getElementById('headerUsuario').innerText='Usuário logado: '+nome;"));
  client.println(F("      var t=(typeof data.tempo==='number')?data.tempo:-1;"));
  client.println(F("      if(t>=0){var m=Math.floor(t/60); var s=('0'+(t%60)).slice(-2);"));
  client.println(F("        document.getElementById('headerTempo').innerText='Tempo online: '+m+':'+s;"));
  client.println(F("      }else{"));
  client.println(F("        document.getElementById('headerTempo').innerText='Tempo online: -- : --';"));
  client.println(F("      }"));
  client.println(F("      if(data.alerta) alert(data.alerta);"));
  client.println(F("    }"));
  client.println(F("  };"));
  client.println(F("  x.open('GET','/sensors',true); x.send();"));
  client.println(F("}"));
  client.println(F("setInterval(updateSensors,1000);"));
  client.println(F("</script>"));
  client.println(F("</head><body onload='updateSensors()'>"));

  // Container principal com duas colunas
  client.println(F("<div class='container'>"));
  // Coluna 1: Lâmpadas, Alarme, Ventilador
  client.println(F("<div class='column'>"));

  // Bloco "Teclado" + Usuário/Tempo dentro do container (centralizado)
  client.println(F("<div class='logininfo'>"));
  client.println(F("<h2>Teclado</h2>"));
  client.print  (F("<div id='headerUsuario' class='loginline'>Usuário logado: "));
  if (usuarioAtual.length() > 0) {
    client.print(usuarioAtual);
  } else {
    client.print(F("-----"));
  }
  client.println(F("</div>"));
  client.print  (F("<div id='headerTempo' class='loginline'>Tempo online: "));
  if (usuarioAtual.length() > 0 && loginStartMillis > 0) {
    unsigned long elapsed = (millis() - loginStartMillis) / 1000UL;
    unsigned long mm = elapsed / 60UL;
    unsigned long ss = elapsed % 60UL;
    client.print(mm);
    client.print(F(":"));
    if (ss < 10) client.print('0');
    client.print(ss);
  } else {
    client.print(F("-- : --"));
  }
  client.println(F("</div>"));
  client.println(F("</div>")); // fim logininfo

  // Lâmpadas
  client.println(F("<h2>Lâmpadas</h2>"));
  const char* lampadas[] = {"Quarto","Varanda","Sala","Cozinha","Banheiro","Garagem","Luz Geral"};
  const char* ids[]      = {"luzQuarto","luzVaranda","luzSala","luzCozinha","luzBanheiro","luzGaragem","luzGeral"};
  for (int i = 0; i < 7; i++) {
    client.print(F("<div class='row'><span class='label'>"));
    client.print(lampadas[i]);
    client.print(F("</span><button onclick=\"sendCommand('"));
    client.print(ids[i]); client.print(F("=ligar')\" class='ligar'>Ligar</button>"));
    client.print(F("<button onclick=\"sendCommand('"));
    client.print(ids[i]); client.print(F("=desligar')\" class='desligar'>Desligar</button></div>"));
  }

  // Alarme
  client.println(F("<h2>Alarme</h2><div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('alarm=Ligar Alarme')\" class='ligarAlarme'>Ligar Alarme</button>"));
  client.println(F("<button onclick=\"sendCommand('alarm=Desligar Alarme')\" class='desligarAlarme'>Desligar Alarme</button>"));
  client.println(F("</div>"));
  client.print(F("<p>Status do Alarme: <strong id='statusAlarme'>"));
  client.print(estadoDoAlarme ? F("Ligado") : F("Desligado"));
  client.println(F("</strong></p>"));

  // Ventilador
  client.println(F("<h2>Ventilador</h2><div class='row' style='margin-bottom:0;'>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMin')\" class='ligarVent'>Velocidade mínima</button>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMed')\" class='ligarVent'>Velocidade média</button>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=ligarMax')\" class='ligarVent'>Velocidade máxima</button></div>"));
  client.println(F("<button onclick=\"sendCommand('ventilador=desligar')\" class='desligarVent'>Desligar Ventilador</button>"));
  client.println(F("</div>")); // fim coluna 1

  // Coluna 2: Portões, Janelas, Sensores
  client.println(F("<div class='column'>"));

  // Portão da casa
  client.println(F("<h2>Portão da casa</h2><div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('portaoCasa=abrir')\" class='abrir'>Abrir portão</button>"));
  client.println(F("<button onclick=\"sendCommand('portaoCasa=fechar')\" class='fechar'>Fechar portão</button>"));
  client.println(F("</div>"));

  // Portão da garagem
  client.println(F("<h2>Portão da Garagem</h2><div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('portaoGaragem=abrir')\" class='abrir'>Abrir garagem</button>"));
  client.println(F("<button onclick=\"sendCommand('portaoGaragem=fechar')\" class='fechar'>Fechar garagem</button>"));
  client.println(F("</div>"));

  // Varal
  client.println(F("<h2>Varal de Roupas</h2><div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('varal=abrir')\" class='abrir'>Estender Varal</button>"));
  client.println(F("<button onclick=\"sendCommand('varal=fechar')\" class='fechar'>Recolher Varal</button>"));
  client.println(F("</div>"));

  // Janelas
  client.println(F("<h2>Janelas da Casa</h2>"));
  const char* jnames[] = {"Banheiro","Varanda","Ambas"};
  const char* jids[]   = {"janelaBanheiro","janelaVaranda","janelasAmbas"};
  for (int i = 0; i < 3; i++) {
    client.println(F("<div class='button-row'>"));
    client.print(F("<button onclick=\"sendCommand('"));
    client.print(jids[i]); client.print(F("=abrir')\" class='abrir'>Abrir ")); client.print(jnames[i]); client.println(F("</button>"));
    client.print(F("<button onclick=\"sendCommand('"));
    client.print(jids[i]); client.print(F("=fechar')\" class='fechar'>Fechar ")); client.print(jnames[i]); client.println(F("</button></div>"));
  }

  // Janelas e varal automático
  client.println(F("<h2>Janelas e Varal automatizado</h2><div class='button-row'>"));
  client.println(F("<button onclick=\"sendCommand('janelaAutomatica=abrir')\" class='abrir'>Ativar automação</button>"));
  client.println(F("<button onclick=\"sendCommand('janelaAutomatica=fechar')\" class='fechar'>Desativar automação</button>"));
  client.println(F("</div>"));
  client.print(F("<p>Status: <strong id='statusAutomatico'>"));
  client.print(janelaAutomatica ? F("Ligada") : F("Desligada"));
  client.println(F("</strong></p>"));

  client.println(F("<div class='sensores-container'>"));
  client.println(F("<h2>Sensores</h2>"));

  client.println(F("<p class='sensor-fogo'><strong id='statusFogo'>"));
  client.print(valorSensorFogo ? F("Sem fogo.") : F("FOGO DETECTADO!!"));
  client.println(F("</strong></p>"));

  client.println(F("<p class='sensor-chuva'><strong id='statusChuva'>"));
  client.print(valorSensorAgua ? F("Sem chuva.") : F("CHUVA DETECTADA!!"));
  client.println(F("</strong></p>"));

  client.println(F("</div>"));

  client.println(F("</div>")); // fim coluna 2
  client.println(F("</div>")); // fim container

  // Fecha HTML
  client.println(F("</body></html>"));
  client.println();
}


// ---------------------------------------------------------------------------
// ------------------- TRADUTOR DE REQUISIÇÕES HTTP --------------------------
// ---------------------------------------------------------------------------
void handleClientCommands(String &currentLine, EthernetClient &client) {
  if (currentLine.endsWith("GET /?luzQuarto=ligar")) {
    luzQuarto = true; digitalWrite(pinoQuarto, HIGH);
    mostrarMensagem("Luz Quarto ON");
  } else if (currentLine.endsWith("GET /?luzQuarto=desligar")) {
    luzQuarto = false; digitalWrite(pinoQuarto, LOW);
    mostrarMensagem("Luz Quarto OFF");
  } else if (currentLine.endsWith("GET /?luzVaranda=ligar")) {
    luzVaranda = true; digitalWrite(pinoVaranda, HIGH);
    mostrarMensagem("Luz Varanda ON");
  } else if (currentLine.endsWith("GET /?luzVaranda=desligar")) {
    luzVaranda = false; digitalWrite(pinoVaranda, LOW);
    mostrarMensagem("Luz Varanda OFF");
  } else if (currentLine.endsWith("GET /?luzSala=ligar")) {
    luzSala = true; digitalWrite(pinoSala, HIGH);
    mostrarMensagem("Luz Sala ON");
  } else if (currentLine.endsWith("GET /?luzSala=desligar")) {
    luzSala = false; digitalWrite(pinoSala, LOW);
    mostrarMensagem("Luz Sala OFF");
  } else if (currentLine.endsWith("GET /?luzCozinha=ligar")) {
    luzCozinha = true; digitalWrite(pinoCozinha, HIGH);
    mostrarMensagem("Luz Cozinha ON");
  } else if (currentLine.endsWith("GET /?luzCozinha=desligar")) {
    luzCozinha = false; digitalWrite(pinoCozinha, LOW);
    mostrarMensagem("Luz Cozinha OFF");
  } else if (currentLine.endsWith("GET /?luzBanheiro=ligar")) {
    luzBanheiro = true; digitalWrite(pinoBanheiro, HIGH);
    mostrarMensagem("Luz Banheiro ON");
  } else if (currentLine.endsWith("GET /?luzBanheiro=desligar")) {
    luzBanheiro = false; digitalWrite(pinoBanheiro, LOW);
    mostrarMensagem("Luz Banheiro OFF");
  } else if (currentLine.endsWith("GET /?luzGaragem=ligar")) {
    luzGaragem = true; digitalWrite(pinoGaragem, HIGH);
    mostrarMensagem("Luz Garagem ON");
  } else if (currentLine.endsWith("GET /?luzGaragem=desligar")) {
    luzGaragem = false; digitalWrite(pinoGaragem, LOW);
    mostrarMensagem("Luz Garagem OFF");
  } else if (currentLine.endsWith("GET /?luzGeral=ligar")) {
    ligarTodasLuzes();
  } else if (currentLine.endsWith("GET /?luzGeral=desligar")) {
    desligarTodasLuzes();
  } else if (currentLine.endsWith("GET /?alarm=Ligar%20Alarme")) {
    if (!estadoDoAlarme) {
      estadoDoAlarme = true;
      digitalWrite(pinoLaser, HIGH);
      tempoAtivacaoAlarme = millis();
      mostrarDuasLinhas("ALARME", "LIGADO");
      bloqueiaLinha2Ate = millis() + 2000;
    }
  } else if (currentLine.endsWith("GET /?alarm=Desligar%20Alarme")) {
    if (estadoDoAlarme) {
      estadoDoAlarme = false;
      alertaAtivo = false;
      digitalWrite(pinoLaser, LOW);
      noTone(pinoBuzzer);
      Serial.println(F("Alarme desligado."));
      mostrarDuasLinhas("ALARME", "DESLIGADO");
      bloqueiaLinha2Ate = millis() + 2000;
    }
  } else if (currentLine.endsWith("GET /?ventilador=desligar")) {
    digitalWrite(pinoVentilador, LOW);
    Serial.println(F("Ventilador desligado"));
    mostrarMensagem("Ventilador OFF");
  } else if (currentLine.endsWith("GET /?ventilador=ligarMin")) {
    digitalWrite(pinoVentilador, HIGH);
    analogWrite(pinoVelocidadeVentilador, 100);
    Serial.println(F("Ventilador ligado na velocidade mínima"));
    mostrarMensagem("Ventilador Min");
  } else if (currentLine.endsWith("GET /?ventilador=ligarMed")) {
    digitalWrite(pinoVentilador, HIGH);
    analogWrite(pinoVelocidadeVentilador, 140);
    Serial.println(F("Ventilador ligado na velocidade média"));
    mostrarMensagem("Ventilador Med");
  } else if (currentLine.endsWith("GET /?ventilador=ligarMax")) {
    digitalWrite(pinoVentilador, HIGH);
    analogWrite(pinoVelocidadeVentilador, 255);
    Serial.println(F("Ventilador ligado na velocidade máxima"));
    mostrarMensagem("Ventilador Max");
  } else if (currentLine.endsWith("GET /?portaoCasa=abrir")) {
    abrirPortao();
  } else if (currentLine.endsWith("GET /?portaoCasa=fechar")) {
    fecharPortao();
  } else if (currentLine.endsWith("GET /?portaoGaragem=abrir")) {
    abrirPortaoGaragem();
  } else if (currentLine.endsWith("GET /?portaoGaragem=fechar")) {
    fecharPortaoGaragem();
  } else if (currentLine.endsWith("GET /?janelaBanheiro=abrir")) {
    abrirJanelaBanheiro();
  } else if (currentLine.endsWith("GET /?janelaBanheiro=fechar")) {
    fecharJanelaBanheiro();
  } else if (currentLine.endsWith("GET /?janelaVaranda=abrir")) {
    abrirJanelaVaranda();
  } else if (currentLine.endsWith("GET /?janelaVaranda=fechar")) {
    fecharJanelaVaranda();
  } else if (currentLine.endsWith("GET /?janelasAmbas=abrir")) {
    abrirJanelaVaranda();
    delay(500);
    abrirJanelaBanheiro();
  } else if (currentLine.endsWith("GET /?janelasAmbas=fechar")) {
    fecharJanelaVaranda();
    delay(500);
    fecharJanelaBanheiro();
  } else if (currentLine.endsWith("GET /?janelaAutomatica=abrir")) {
    if (!janelaAutomatica) {
      Serial.println(F("Janela automatizada ativada!"));
      janelaAutomatica = true;
      mostrarDuasLinhas("AUTOMACAO", "ATIVADA");
      aguardandoPosAtivar = true;
      quandoChecarEstadoPosAtivar = millis() + atrasoMsgAtivar; // exibe status depois
      bloqueiaLinha2Ate = millis() + 2000; // segura a linha 2
    }
  } else if (currentLine.endsWith("GET /?janelaAutomatica=fechar")) {
    if (janelaAutomatica) {
      Serial.println(F("Janela automatizada desativada!"));
      janelaAutomatica = false;
      mostrarDuasLinhas("AUTOMACAO", "DESATIVADA");
      proximaAcaoChuva = 0;
      aguardandoPosAtivar = false;
      bloqueiaLinha2Ate = millis() + 2000;
    }
  } else if (currentLine.endsWith("GET /?varal=abrir")) {
    estenderVaral();
  } else if (currentLine.endsWith("GET /?varal=fechar")) {
    recolherVaral();
  }
}

// ---------------------------------------------------------------------------
// --------------------------- CONTROLE DOS POSTES ---------------------------
// ---------------------------------------------------------------------------
void controlarPostes() {
  valorLdrPostes = analogRead(pinoLdrPostes);
  bool postesLigados = (valorLdrPostes > limitePoste);

  // Liga ou desliga os postes
  digitalWrite(pinoPoste1, postesLigados ? HIGH : LOW);
  digitalWrite(pinoPoste2, postesLigados ? HIGH : LOW);

  static bool          ultimoEstadoPostes = false;     // guarda o último estado (dia/noite)
  static unsigned long ultimoLogPostes    = 0;         // tempo do último log

  // Se passaram 5s OU houve mudança de estado → registrar no Serial
  if (millis() - ultimoLogPostes > 5000 || postesLigados != ultimoEstadoPostes) {
    ultimoLogPostes = millis();

    if (postesLigados) {
      Serial.print(F("Noite, postes ligados. "));
      // Mostra no LCD só quando mudar de dia -> noite
      if (postesLigados != ultimoEstadoPostes) {
        mostrarMensagem("     Postes         ligados");
      }
    } else {
      Serial.print(F("Dia, postes desligados. "));
      // Mostra no LCD só quando mudar de noite -> dia
      if (postesLigados != ultimoEstadoPostes) {
        mostrarMensagem("     Postes        desligados");
      }
    }

    Serial.print(F("Valor do LDR: "));
    Serial.println(valorLdrPostes);

    ultimoEstadoPostes = postesLigados; // atualiza o estado
  }
}

// ---------------------------------------------------------------------------
// ------------------------------ SENSOR DE FOGO -----------------------------
// ---------------------------------------------------------------------------
void detectarFogo() {
  if (estadoDoAlarme) return;  // remova se quiser detectar fogo mesmo com alarme armado

  // --------- Leitura + debounce (LOW = FOGO) ----------
  bool leituraBruta = (digitalRead(sensorFogo) == LOW); // true = fogo
  static bool ultimaLeituraBruta = false;
  static bool leituraFiltrada = false;
  static unsigned long mudouEm = 0;

  if (leituraBruta != ultimaLeituraBruta) {
    ultimaLeituraBruta = leituraBruta;
    mudouEm = millis();
  }
  if (millis() - mudouEm >= 40) {
    leituraFiltrada = ultimaLeituraBruta;
  }

  // --------- Máquina de estados com "hold" ----------
  static bool fogoAtivo = false;             // travado enquanto durar o fogo
  static unsigned long semFogoDesde = 0;     // início do período sem fogo
  static bool avisou = false;                // mostra mensagem 1x por ativação

  if (leituraFiltrada) {                     // ainda há fogo
    fogoAtivo = true;
    semFogoDesde = 0;

    // === BLOQUEIA TECLADO enquanto o fogo estiver ativo ===
    if (!tecladoBloqueadoPorFogo) {
      tecladoBloqueadoPorFogo = true;
      flushTeclado();     // drena qualquer tecla “fantasma” já capturada
    }

  } else if (fogoAtivo) {                    // possível fim do fogo -> inicia hold
    if (semFogoDesde == 0) semFogoDesde = millis();
    if (millis() - semFogoDesde > 500) {    // 0,5 s sem fogo para desligar
      fogoAtivo = false;
      avisou = false;
      noTone(pinoBuzzer);
      digitalWrite(pinoCozinha, luzCozinha ? HIGH : LOW);  // restaura preferido

      // === LIBERA TECLADO ao encerrar fogo ===
      tecladoBloqueadoPorFogo = false;
      flushTeclado();     // garante que nada “preso” dispare após liberar
    }
  }

  if (!fogoAtivo) return;

  // --------- Alerta ativo contínuo enquanto fogoAtivo ----------
  if (!avisou) {
    mostrarDuasLinhas("PERIGO!!","FOGO DETECTADO!!");
    bloqueiaLinha2Ate = millis() + 2000;
    avisou = true;
  }

  // Pisca buzzer e usa a luz da cozinha como alerta enquanto houver fogo
  static bool blink = false;
  static unsigned long ultimoToggle = 0;
  if (millis() - ultimoToggle >= 400) {      // alterna a cada 400 ms
    ultimoToggle = millis();
    blink = !blink;

    if (blink) {
      tone(pinoBuzzer, 2000);                // sem duração -> ligado até noTone()
      digitalWrite(pinoCozinha, HIGH);
      avisou = false;
    } else {
      noTone(pinoBuzzer);
      digitalWrite(pinoCozinha, LOW);
    }
  }
}

// ---------------------------------------------------------------------------
// ------------------------------ SENSOR DE ÁGUA -----------------------------
// ---------------------------------------------------------------------------
void detectarAgua() {
  if (janelaAutomatica && aguardandoPosAtivar) return;

  int leituraChuva = digitalRead(sensorChuva);

  if (leituraChuva == estadoChuvaAnterior) estadoChuvaAtual = leituraChuva;
  estadoChuvaAnterior = leituraChuva;

  static byte ultimoEstadoMostrado = HIGH; // HIGH=sem chuva, LOW=chuva

  // Automação DESLIGADA → apenas exibe mudança de estado
  if (!janelaAutomatica) {
    if (estadoChuvaAtual != ultimoEstadoMostrado) {
      mostrarDuasLinhas(estadoChuvaAtual == LOW ? "CHUVA" : "SEM",
                        estadoChuvaAtual == LOW ? "DETECTADA!!" : "CHUVA!!");
      bloqueiaLinha2Ate = millis() + 2000;
      ultimoEstadoMostrado = estadoChuvaAtual;
    }
    return;
  }

  // Automação LIGADA → ao detectar transição, agenda ação em grupo
  if (estadoChuvaAtual != ultimoEstadoMostrado) {
    if (estadoChuvaAtual == LOW) {
      // Agora CHUVA
      mostrarDuasLinhas("CHUVA", "DETECTADA!!");
      bloqueiaLinha2Ate = millis() + 2000;
      proximaAcaoChuva = 1; // fechar/recolher
    } else {
      // Agora SEM CHUVA
      mostrarDuasLinhas("SEM", "CHUVA!!");
      bloqueiaLinha2Ate = millis() + 2000;
      proximaAcaoChuva = 2; // abrir/estender
    }
    quandoExecutarAcao = millis() + atrasoMsgChuva; // espera a msg
    ultimoEstadoMostrado = estadoChuvaAtual;
  }

  // >>> NOVO: auto-correção contínua (sem transição do sensor)
  // Se a automação está ligada e não há ação pendente, garanta o estado desejado.
  if (proximaAcaoChuva == 0) {
    if (estadoChuvaAtual == LOW) {
      // Deve estar tudo FECHADO/RECOLHIDO
      if (!janelaBanheiroFechado || !janelaVarandaFechado || !varalRecolhido) {
        proximaAcaoChuva = 1;
        quandoExecutarAcao = millis() + 300; // pequena folga
      }
    } else {
      // Deve estar tudo ABERTO/ESTENDIDO
      if (janelaBanheiroFechado || janelaVarandaFechado || varalRecolhido) {
        proximaAcaoChuva = 2;
        quandoExecutarAcao = millis() + 300; // pequena folga
      }
    }
  }
  // <<< FIM do bloco de auto-correção

  // Chegou a hora? Executa tudo de uma vez
  if (proximaAcaoChuva != 0 && millis() >= quandoExecutarAcao) {
    aplicarAcoesChuva(proximaAcaoChuva);
    proximaAcaoChuva = 0;
  }
}

// ---------------------------------------------------------------------------
// ------------------------ PORTÃO DA CASA (STEPPER) -------------------------
// ---------------------------------------------------------------------------
void abrirPortao() {
  if (portaoCasaFechado) {
    Serial.println(F("Portão abrindo..."));
    mostrarDuasLinhas("Portao abrindo.","Favor aguardar!");
    bloqueiaLinha2Ate = millis() + 2000;
    unsigned long tempoDeAbrir = millis();
    ligarPinos();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
      digitalWrite(pinoPortaoCasa1, LOW);
      digitalWrite(pinoPortaoCasa2, LOW);
      digitalWrite(pinoPortaoCasa3, HIGH);
      digitalWrite(pinoPortaoCasa4, HIGH);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, LOW);
      digitalWrite(pinoPortaoCasa2, HIGH);
      digitalWrite(pinoPortaoCasa3, HIGH);
      digitalWrite(pinoPortaoCasa4, LOW);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, HIGH);
      digitalWrite(pinoPortaoCasa2, HIGH);
      digitalWrite(pinoPortaoCasa3, LOW);
      digitalWrite(pinoPortaoCasa4, LOW);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, HIGH);
      digitalWrite(pinoPortaoCasa2, LOW);
      digitalWrite(pinoPortaoCasa3, LOW);
      digitalWrite(pinoPortaoCasa4, HIGH);
      delay(velocidadePortao);
    }
    desligarPinos();
    Serial.println(F("Portão aberto!"));
    portaoCasaFechado = false;
    mostrarMensagem("Portao aberto");
  } else {
    Serial.println(F("Portão ja aberto!"));
  }
}

void fecharPortao() {
  if (!portaoCasaFechado) {
    Serial.println(F("Portão fechando..."));
    mostrarDuasLinhas("Portao fechando!", "Favor aguardar!");
    bloqueiaLinha2Ate = millis() + 2000;
    unsigned long tempoDeAbrir = millis();
    ligarPinos();
    while (millis() - tempoDeAbrir < portaoAbrirFechar) {
      digitalWrite(pinoPortaoCasa1, HIGH);
      digitalWrite(pinoPortaoCasa2, LOW);
      digitalWrite(pinoPortaoCasa3, LOW);
      digitalWrite(pinoPortaoCasa4, HIGH);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, HIGH);
      digitalWrite(pinoPortaoCasa2, HIGH);
      digitalWrite(pinoPortaoCasa3, LOW);
      digitalWrite(pinoPortaoCasa4, LOW);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, LOW);
      digitalWrite(pinoPortaoCasa2, HIGH);
      digitalWrite(pinoPortaoCasa3, HIGH);
      digitalWrite(pinoPortaoCasa4, LOW);
      delay(velocidadePortao);

      digitalWrite(pinoPortaoCasa1, LOW);
      digitalWrite(pinoPortaoCasa2, LOW);
      digitalWrite(pinoPortaoCasa3, HIGH);
      digitalWrite(pinoPortaoCasa4, HIGH);
      delay(velocidadePortao);
    }
    desligarPinos();
    portaoCasaFechado = true;
    Serial.println(F("Portão fechado!"));
    mostrarMensagem("Portao fechado");
  } else {
    Serial.println(F("Portão ja fechado!"));
  }
}

// ---------------------------------------------------------------------------
// ----------------------- PORTÃO DA GARAGEM (SERVO) -------------------------
// ---------------------------------------------------------------------------
void abrirPortaoGaragem() {
  if (portaoGaragemFechado) {
    Serial.println(F("Abrindo garagem..."));
    meuServo1.attach(pinoServoPortaoGaragem);
    delay(100);
    meuServo1.write(50);
    delay(500);
    meuServo1.detach();
    delay(100);
    Serial.println(F("Garagem aberta!"));
    portaoGaragemFechado = false;
    mostrarMensagem("Garagem aberta");
  }
}

void fecharPortaoGaragem() {
  if (!portaoGaragemFechado) {
    Serial.println(F("Fechando garagem..."));
    meuServo1.attach(pinoServoPortaoGaragem);
    delay(100);
    meuServo1.write(165);
    delay(500);
    meuServo1.detach();
    delay(100);
    Serial.println(F("Garagem fechada!"));
    portaoGaragemFechado = true;
    mostrarMensagem("Garagem fechada");
  }
}

// ---------------------------------------------------------------------------
// -------------------------- AUOMAÇÃO JANELA --------------------------------
// ---------------------------------------------------------------------------
void aplicarAcoesChuva(byte acao) {
  if (acao == 1) {
    // CHUVA → fechar janelas e recolher varal
    recolherVaral();
    fecharJanelaBanheiro();
    fecharJanelaVaranda();
  } else if (acao == 2) {
    // SEM CHUVA → abrir janelas e estender varal
    estenderVaral();
    abrirJanelaBanheiro();
    abrirJanelaVaranda();
  }
}

// ------------------------------- JANELAS -----------------------------------
void abrirJanelaBanheiro() {
  if (!janelaBanheiroFechado) return;  // já aberta
  Serial.println(F("Abrindo janela do Banheiro..."));
  meuServo2.attach(pinoServoJanelaBanheiro);
  delay(100);
  meuServo2.write(0);  // ângulo de ABERTA
  delay(500);
  meuServo2.detach();
  delay(100);
  janelaBanheiroFechado = false;
  mostrarDuasLinhas("Janela banheiro", "        fechada");
  bloqueiaLinha2Ate = millis() + 2000;
  Serial.println(F("Janela do Banheiro aberta!"));
}

void fecharJanelaBanheiro() {
  if (janelaBanheiroFechado) return;  // já fechada
  Serial.println(F("Fechando janela do Banheiro..."));
  meuServo2.attach(pinoServoJanelaBanheiro);
  delay(100);
  meuServo2.write(120);  // ângulo de FECHADA
  delay(500);
  meuServo2.detach();
  delay(100);
  janelaBanheiroFechado = true;
  mostrarDuasLinhas("Janela varanda", "        fechada");
  bloqueiaLinha2Ate = millis() + 2000;
  Serial.println(F("Janela do Banheiro fechada!"));
}

void abrirJanelaVaranda() {
  if (!janelaVarandaFechado) return;  // já aberta
  Serial.println(F("Abrindo janela da Varanda..."));
  meuServo3.attach(pinoServoJanelaVaranda);
  delay(100);
  meuServo3.write(140);  // ângulo de ABERTA
  delay(500);
  meuServo3.detach();
  delay(100);
  janelaVarandaFechado = false;
  mostrarDuasLinhas("Janela varanda", "         aberta");
  bloqueiaLinha2Ate = millis() + 2000;
  Serial.println(F("Janela da Varanda aberta!"));
}

void fecharJanelaVaranda() {
  if (janelaVarandaFechado) return;  // já fechada
  Serial.println(F("Fechando janela da Varanda..."));
  meuServo3.attach(pinoServoJanelaVaranda);
  delay(100);
  meuServo3.write(0);  // ângulo de FECHADA
  delay(500);
  meuServo3.detach();
  delay(100);
  janelaVarandaFechado = true;
  mostrarDuasLinhas("Janela varanda", "        fechada");
  bloqueiaLinha2Ate = millis() + 2000;
  Serial.println(F("Janela da Varanda fechada!"));
}

// ------------------------------ VARAL (SERVO) ------------------------------
void estenderVaral() {
  if (!varalRecolhido) return;  // já estendido
  Serial.println(F("Estendendo Varal..."));
  meuServo4.attach(pinoServoVaral);
  delay(100);
  meuServo4.write(5);  // ângulo de ESTENDIDO
  delay(500);
  meuServo4.detach();
  delay(100);
  varalRecolhido = false;
  mostrarMensagem("Varal estendido");
  Serial.println(F("Varal estendido!"));
}

void recolherVaral() {
  if (varalRecolhido) return;  // já recolhido
  Serial.println(F("Recolhendo Varal..."));
  meuServo4.attach(pinoServoVaral);
  delay(100);
  meuServo4.write(180);  // ângulo de RECOLHIDO
  delay(500);
  meuServo4.detach();
  delay(100);
  varalRecolhido = true;
  mostrarMensagem("Varal recolhido");
  Serial.println(F("Varal recolhido!"));
}

// ---------------------------------------------------------------------------
// --------------------------- LUZES (GERAL/GRUPOS) --------------------------
// ---------------------------------------------------------------------------
void ligarTodasLuzes() {
  luzQuarto = true;
  luzVaranda = true;
  luzSala = true;
  luzCozinha = true;
  luzBanheiro = true;
  luzGaragem = true;

  digitalWrite(pinoQuarto, HIGH);
  digitalWrite(pinoVaranda, HIGH);
  digitalWrite(pinoSala, HIGH);
  digitalWrite(pinoCozinha, HIGH);
  digitalWrite(pinoBanheiro, HIGH);
  digitalWrite(pinoGaragem, HIGH);

  if (!estadoDoAlarme) {
    Serial.println(F("Todas as luzes foram ligadas"));
    mostrarMensagem("Todas luzes ON");
  }
}

void desligarTodasLuzes() {
  luzQuarto = false;
  luzVaranda = false;
  luzSala = false;
  luzCozinha = false;
  luzBanheiro = false;
  luzGaragem = false;

  digitalWrite(pinoQuarto, LOW);
  digitalWrite(pinoVaranda, LOW);
  digitalWrite(pinoSala, LOW);
  digitalWrite(pinoCozinha, LOW);
  digitalWrite(pinoBanheiro, LOW);
  digitalWrite(pinoGaragem, LOW);

  if (!estadoDoAlarme) {
    Serial.println(F("Todas as luzes foram desligadas"));
    mostrarMensagem("Todas luzes OFF");
  }
}

// ---------------------------------------------------------------------------
// ----------------------- UTILITÁRIOS DO MOTOR (PORTÃO) ---------------------
// ---------------------------------------------------------------------------
void ligarPinos() {
  pinMode(pinoPortaoCasa1, OUTPUT);
  pinMode(pinoPortaoCasa2, OUTPUT);
  pinMode(pinoPortaoCasa3, OUTPUT);
  pinMode(pinoPortaoCasa4, OUTPUT);
}

void desligarPinos() {
  pinMode(pinoPortaoCasa1, INPUT);
  pinMode(pinoPortaoCasa2, INPUT);
  pinMode(pinoPortaoCasa3, INPUT);
  pinMode(pinoPortaoCasa4, INPUT);
}

// ---------------------------------------------------------------------------
// ------------------------ SILENCIAR LUZES (ALARME) -------------------------
// ---------------------------------------------------------------------------
void desligarTodasLuzesSilencioso() {
  luzQuarto = luzVaranda = luzSala = luzCozinha = luzBanheiro = luzGaragem = false;

  digitalWrite(pinoQuarto, LOW);
  digitalWrite(pinoVaranda, LOW);
  digitalWrite(pinoSala, LOW);
  digitalWrite(pinoCozinha, LOW);
  digitalWrite(pinoBanheiro, LOW);
  digitalWrite(pinoGaragem, LOW);
}

void ligarTodasLuzesSilencioso() {
  luzQuarto = luzVaranda = luzSala = luzCozinha = luzBanheiro = luzGaragem = true;

  digitalWrite(pinoQuarto, HIGH);
  digitalWrite(pinoVaranda, HIGH);
  digitalWrite(pinoSala, HIGH);
  digitalWrite(pinoCozinha, HIGH);
  digitalWrite(pinoBanheiro, HIGH);
  digitalWrite(pinoGaragem, HIGH);
}
